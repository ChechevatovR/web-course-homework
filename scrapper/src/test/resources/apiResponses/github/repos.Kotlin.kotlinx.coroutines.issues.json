[
    {
        "url": "https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/4041",
        "repository_url": "https://api.github.com/repos/Kotlin/kotlinx.coroutines",
        "labels_url": "https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/4041/labels{/name}",
        "comments_url": "https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/4041/comments",
        "events_url": "https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/4041/events",
        "html_url": "https://github.com/Kotlin/kotlinx.coroutines/pull/4041",
        "id": 2127754256,
        "node_id": "PR_kwDOA63QcM5mg6Li",
        "number": 4041,
        "title": "Function containing atomic operations should be private ",
        "user": {
            "login": "mvicsokolova",
            "id": 82594708,
            "node_id": "MDQ6VXNlcjgyNTk0NzA4",
            "avatar_url": "https://avatars.githubusercontent.com/u/82594708?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/mvicsokolova",
            "html_url": "https://github.com/mvicsokolova",
            "followers_url": "https://api.github.com/users/mvicsokolova/followers",
            "following_url": "https://api.github.com/users/mvicsokolova/following{/other_user}",
            "gists_url": "https://api.github.com/users/mvicsokolova/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/mvicsokolova/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/mvicsokolova/subscriptions",
            "organizations_url": "https://api.github.com/users/mvicsokolova/orgs",
            "repos_url": "https://api.github.com/users/mvicsokolova/repos",
            "events_url": "https://api.github.com/users/mvicsokolova/events{/privacy}",
            "received_events_url": "https://api.github.com/users/mvicsokolova/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [

        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [

        ],
        "milestone": null,
        "comments": 7,
        "created_at": "2024-02-09T19:44:59Z",
        "updated_at": "2024-02-16T17:43:20Z",
        "closed_at": null,
        "author_association": "CONTRIBUTOR",
        "active_lock_reason": null,
        "draft": false,
        "pull_request": {
            "url": "https://api.github.com/repos/Kotlin/kotlinx.coroutines/pulls/4041",
            "html_url": "https://github.com/Kotlin/kotlinx.coroutines/pull/4041",
            "diff_url": "https://github.com/Kotlin/kotlinx.coroutines/pull/4041.diff",
            "patch_url": "https://github.com/Kotlin/kotlinx.coroutines/pull/4041.patch",
            "merged_at": null
        },
        "body": "Calling a function containing atomic operations from a different file results in the failure of Native incremental compilation.\r\n\r\nMade `BufferedChannel#sendImpl` function private.\r\n\r\nThis is a WA for [KT-65554](https://youtrack.jetbrains.com/issue/KT-65554/atomicfu-K-N-Plugin-generates-IrGetField-from-another-file)\r\n\r\n\r\nMaybe we could refactor this in a better way though.",
        "reactions": {
            "url": "https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/4041/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/4041/timeline",
        "performed_via_github_app": null,
        "state_reason": null
    },
    {
        "url": "https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/4040",
        "repository_url": "https://api.github.com/repos/Kotlin/kotlinx.coroutines",
        "labels_url": "https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/4040/labels{/name}",
        "comments_url": "https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/4040/comments",
        "events_url": "https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/4040/events",
        "html_url": "https://github.com/Kotlin/kotlinx.coroutines/issues/4040",
        "id": 2126739271,
        "node_id": "I_kwDOA63QcM5-w3dH",
        "number": 4040,
        "title": "Coroutines perform unnecessary thread switches",
        "user": {
            "login": "ListenableFuture",
            "id": 159518155,
            "node_id": "U_kgDOCYINyw",
            "avatar_url": "https://avatars.githubusercontent.com/u/159518155?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/ListenableFuture",
            "html_url": "https://github.com/ListenableFuture",
            "followers_url": "https://api.github.com/users/ListenableFuture/followers",
            "following_url": "https://api.github.com/users/ListenableFuture/following{/other_user}",
            "gists_url": "https://api.github.com/users/ListenableFuture/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/ListenableFuture/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/ListenableFuture/subscriptions",
            "organizations_url": "https://api.github.com/users/ListenableFuture/orgs",
            "repos_url": "https://api.github.com/users/ListenableFuture/repos",
            "events_url": "https://api.github.com/users/ListenableFuture/events{/privacy}",
            "received_events_url": "https://api.github.com/users/ListenableFuture/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 864692605,
                "node_id": "MDU6TGFiZWw4NjQ2OTI2MDU=",
                "url": "https://api.github.com/repos/Kotlin/kotlinx.coroutines/labels/waiting%20for%20clarification",
                "name": "waiting for clarification",
                "color": "c98842",
                "default": false,
                "description": ""
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [

        ],
        "milestone": null,
        "comments": 5,
        "created_at": "2024-02-09T09:11:17Z",
        "updated_at": "2024-02-16T11:04:57Z",
        "closed_at": null,
        "author_association": "NONE",
        "active_lock_reason": null,
        "body": "**Tl;dr - Coroutines seem to have a trade-off between performing extra thread switches versus using `Dispatchers.Unconfined`, and there doesn’t appear to be an ideal solution**\r\n\r\nWe’re creating a set of `CoroutineScopes` for our Android application, which may be tied to the lifecycles of various subcomponents, and we’d like to ensure they run asynchronous code efficiently.  For reference, the dispatchers are created from our existing Java executors using `ExecutorService.asCoroutineDispatcher()`, since the executors are already used elsewhere in the application.\r\n\r\n### Issue 1 - Unnecessary thread switches\r\n\r\nSuppose we have a `mainCoroutineScope` which uses the application’s main thread:\r\n\r\n```\r\n// Thread A\r\nmainCoroutineScope.launch {\r\n  // Main thread\r\n  suspendBackground()\r\n  // Main thread\r\n  suspendBackground()\r\n  // Main thread\r\n}\r\n```\r\n\r\nIn the example above, the `CoroutineScope` will repeatedly switch between `Main Thread` and `Background Thread`, even if the code blocks running on the main thread are empty.  This enqueues unnecessary work on the main thread, which is a concern in Android, since the main thread is used to render UI and needs to stay responsive.  The `CoroutineScope` will also take longer to complete its tasks, since it needs to wait for the main-threaded tasks to complete, and the main thread is often busy performing other work.\r\n\r\n### Issue 2 - Reentrancy\r\n\r\nTo avoid the unnecessary thread switches above, we can use inline dispatch with `Dispatchers.Unconfined`.  This allows the example above to have the following ordering, which no other scope can do:\r\n```\r\nThread A -> suspendBackground() -> inline code (background thread) -> suspendBackground() -> inline code (background thread)\r\n```\r\n\r\nIn general, `Dispatchers.Unconfined` appears to be the only way for a `CoroutineScope` to allow full control over its thread behavior.  This indicates our scopes should use `Dispatchers.Unconfined` by default, however this is discouraged by the [Kotlin docs](https://kotlinlang.org/docs/coroutine-context-and-dispatchers.html#unconfined-vs-confined-dispatcher), and introduces concerns with reentrancy.\r\n\r\n### Comparison with Java\r\n\r\nIn Java, `directExecutor()` is the equivalent of Kotlin’s `Dispatchers.Unconfined`, and with Java’s `Futures`, the user is forced to choose an executor at each call.  However in Kotlin, `Unconfined` implicitly runs the code inline, so the user must actively choose when to switch executors, otherwise it runs everything like `directExecutor()` by default.  To make `Unconfined` scopes more explicit like Java, we would need a way to force users to choose a dispatcher for each code block.\r\n\r\n### Summary\r\n\r\nThere seems to be a trade-off between extra thread switches versus reentrancy issues, and there doesn’t appear to be an ideal solution.  Kotlin provides everything we need to control thread switching, but we’d need to default all our scopes to `Unconfined`, and users would need to be fairly experienced to ensure all their code is safely dispatched.  I’m wondering the Kotlin team’s perspective of this, and what they would recommend.  In particular:\r\n\r\n- Are there any optimizations the language or compiler can do to avoid unnecessary thread switches?\r\n- Would you recommend `Unconfined` as the default for `CoroutineScopes` tied to the lifecycle of subcomponents? Otherwise, is there a way to efficiently call suspending code while avoiding the dangers of inline execution?",
        "reactions": {
            "url": "https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/4040/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/4040/timeline",
        "performed_via_github_app": null,
        "state_reason": null
    },
    {
        "url": "https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/4034",
        "repository_url": "https://api.github.com/repos/Kotlin/kotlinx.coroutines",
        "labels_url": "https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/4034/labels{/name}",
        "comments_url": "https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/4034/comments",
        "events_url": "https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/4034/events",
        "html_url": "https://github.com/Kotlin/kotlinx.coroutines/issues/4034",
        "id": 2121265390,
        "node_id": "I_kwDOA63QcM5-b_Du",
        "number": 4034,
        "title": "flatMapLatest + combine + first leads to execution while cancelled",
        "user": {
            "login": "ansman",
            "id": 102883,
            "node_id": "MDQ6VXNlcjEwMjg4Mw==",
            "avatar_url": "https://avatars.githubusercontent.com/u/102883?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/ansman",
            "html_url": "https://github.com/ansman",
            "followers_url": "https://api.github.com/users/ansman/followers",
            "following_url": "https://api.github.com/users/ansman/following{/other_user}",
            "gists_url": "https://api.github.com/users/ansman/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/ansman/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/ansman/subscriptions",
            "organizations_url": "https://api.github.com/users/ansman/orgs",
            "repos_url": "https://api.github.com/users/ansman/repos",
            "events_url": "https://api.github.com/users/ansman/events{/privacy}",
            "received_events_url": "https://api.github.com/users/ansman/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 1411045241,
                "node_id": "MDU6TGFiZWwxNDExMDQ1MjQx",
                "url": "https://api.github.com/repos/Kotlin/kotlinx.coroutines/labels/android",
                "name": "android",
                "color": "e99695",
                "default": false,
                "description": ""
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [

        ],
        "milestone": null,
        "comments": 5,
        "created_at": "2024-02-06T16:52:56Z",
        "updated_at": "2024-02-12T22:13:57Z",
        "closed_at": null,
        "author_association": "CONTRIBUTOR",
        "active_lock_reason": null,
        "body": "**Describe the bug**\r\n\r\nFirstly, it's possible this is expected behavior but it certainly doesn't seem that way.\r\n\r\nWe have a flow that we collect using `first()`. This flow is a combination of multiple upstream flows but they all emit their items synchronously. The downstream flow limits the number of emissions to a single element then uses `awaitCompletion()` to avoid terminating the flow. This is the flow we call `first()` on.\r\n\r\nUnder some circumstances, we are seeing the `first()` call resuming _after_ the scope has been cancelled which is causing a crash for us.\r\n\r\nIf either the `flatMapLatest` or `combine` is removed, the code behaves as expected, although `first()` never resumes.\r\n\r\nI know there are no real guarantees that code won't be running while canceled. But there are few things that makes me think that this doesn't apply in this case:\r\n- There is no non-cooperative suspension as far as I know.\r\n- Only a single thread is involved.\r\n\r\n**Provide a Reproducer**\r\nThis reproduces it on an Android device, but it's possible it can reproed on the JVM too.\r\n```kotlin\r\n// This must be run on the main thread\r\nval scope = CoroutineScope(SupervisorJob() + Dispatchers.Main.immediate)\r\nprintln(\"Before launch\")\r\nscope.launch {\r\n    flowOf(listOf(1, 2, 3))\r\n        .flatMapLatest { numbers ->\r\n            combine(numbers.map { flowOf(it) }) { it.sum() }\r\n        }\r\n        .onEach { println(\"Got item\") }\r\n        .first()\r\n    println(\"After first, scope is active: ${scope.isActive}\")\r\n}\r\nprintln(\"After launch\")\r\nscope.cancel()\r\n```\r\nI expect this to print:\r\n```\r\nBefore launch\r\nGot item\r\nAfter first, scope is active: true\r\nAfter launch\r\n```\r\n\r\nInstead I'm seeing this:\r\n```\r\nBefore launch\r\nGot item\r\nAfter launch\r\nAfter first, scope is active: false\r\n```",
        "reactions": {
            "url": "https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/4034/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/4034/timeline",
        "performed_via_github_app": null,
        "state_reason": null
    },
    {
        "url": "https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/4030",
        "repository_url": "https://api.github.com/repos/Kotlin/kotlinx.coroutines",
        "labels_url": "https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/4030/labels{/name}",
        "comments_url": "https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/4030/comments",
        "events_url": "https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/4030/events",
        "html_url": "https://github.com/Kotlin/kotlinx.coroutines/issues/4030",
        "id": 2115110431,
        "node_id": "I_kwDOA63QcM5-EgYf",
        "number": 4030,
        "title": "High CPU usate in SharedFlowImpl",
        "user": {
            "login": "fvasco",
            "id": 10399237,
            "node_id": "MDQ6VXNlcjEwMzk5MjM3",
            "avatar_url": "https://avatars.githubusercontent.com/u/10399237?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/fvasco",
            "html_url": "https://github.com/fvasco",
            "followers_url": "https://api.github.com/users/fvasco/followers",
            "following_url": "https://api.github.com/users/fvasco/following{/other_user}",
            "gists_url": "https://api.github.com/users/fvasco/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/fvasco/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/fvasco/subscriptions",
            "organizations_url": "https://api.github.com/users/fvasco/orgs",
            "repos_url": "https://api.github.com/users/fvasco/repos",
            "events_url": "https://api.github.com/users/fvasco/events{/privacy}",
            "received_events_url": "https://api.github.com/users/fvasco/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 800420394,
                "node_id": "MDU6TGFiZWw4MDA0MjAzOTQ=",
                "url": "https://api.github.com/repos/Kotlin/kotlinx.coroutines/labels/performance",
                "name": "performance",
                "color": "41bc38",
                "default": false,
                "description": null
            },
            {
                "id": 2057982217,
                "node_id": "MDU6TGFiZWwyMDU3OTgyMjE3",
                "url": "https://api.github.com/repos/Kotlin/kotlinx.coroutines/labels/flow-sharing",
                "name": "flow-sharing",
                "color": "d4c5f9",
                "default": false,
                "description": ""
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [

        ],
        "milestone": null,
        "comments": 6,
        "created_at": "2024-02-02T14:49:40Z",
        "updated_at": "2024-02-15T10:20:45Z",
        "closed_at": null,
        "author_association": "CONTRIBUTOR",
        "active_lock_reason": null,
        "body": "We detected high CPU usage on `kotlinx.coroutines.flow.SharedFlowImpl` using Java Flight Recorder on a 2 CPU machine.\r\nThe consumed CPU was two order of magnitude than others, neither other code looks causing this CPU usage.\r\n\r\n![image](https://github.com/Kotlin/kotlinx.coroutines/assets/10399237/9ac4b876-e88a-4e40-a2b1-704e0ee31e47)\r\n\r\nJFR's thread dump:\r\n\r\n~~~\r\n\"DefaultDispatcher-worker-1\" #46 [66] daemon prio=5 os_prio=0 cpu=1192711.97ms elapsed=723096.39s tid=0x00007fe79081eb00 nid=66 waiting for monitor entry  [0x00007fe7a9bfe000]\r\n   java.lang.Thread.State: BLOCKED (on object monitor)\r\n\tat kotlinx.coroutines.flow.SharedFlowImpl.tryTakeValue(SharedFlow.kt:783)\r\n\t- waiting to lock <0x00000007f20bf098> (a kotlinx.coroutines.flow.SharedFlowImpl)\r\n\tat kotlinx.coroutines.flow.SharedFlowImpl.collect$suspendImpl(SharedFlow.kt:377)\r\n\tat kotlinx.coroutines.flow.SharedFlowImpl$collect$1.invokeSuspend(SharedFlow.kt)\r\n\tat kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith(ContinuationImpl.kt:33)\r\n\tat kotlinx.coroutines.DispatchedTask.run(DispatchedTask.kt:108)\r\n\tat kotlinx.coroutines.scheduling.CoroutineScheduler.runSafely(CoroutineScheduler.kt:584)\r\n\tat kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.executeTask(CoroutineScheduler.kt:793)\r\n\tat kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker(CoroutineScheduler.kt:697)\r\n\tat kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run(CoroutineScheduler.kt:684)\r\n\r\n\"DefaultDispatcher-worker-6\" #326 [300] daemon prio=5 os_prio=0 cpu=1192775.65ms elapsed=723053.16s tid=0x00007fe79c32e4d0 nid=300 runnable  [0x00007fe7652e3000]\r\n   java.lang.Thread.State: RUNNABLE\r\n\tat kotlinx.coroutines.flow.SharedFlowImpl.updateCollectorIndexLocked$kotlinx_coroutines_core(SharedFlow.kt:774)\r\n\tat kotlinx.coroutines.flow.SharedFlowImpl.tryTakeValue(SharedFlow.kt:634)\r\n\t- locked <0x00000007f20bf098> (a kotlinx.coroutines.flow.SharedFlowImpl)\r\n\tat kotlinx.coroutines.flow.SharedFlowImpl.collect$suspendImpl(SharedFlow.kt:377)\r\n\tat kotlinx.coroutines.flow.SharedFlowImpl$collect$1.invokeSuspend(SharedFlow.kt)\r\n\tat kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith(ContinuationImpl.kt:33)\r\n\tat kotlinx.coroutines.DispatchedTask.run(DispatchedTask.kt:108)\r\n\tat kotlinx.coroutines.scheduling.CoroutineScheduler.runSafely(CoroutineScheduler.kt:584)\r\n\tat kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.executeTask(CoroutineScheduler.kt:793)\r\n\tat kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker(CoroutineScheduler.kt:697)\r\n\tat kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run(CoroutineScheduler.kt:684)\r\n~~~\r\n\r\na bit later:\r\n\r\n~~~\r\n\"DefaultDispatcher-worker-1\" #46 [66] daemon prio=5 os_prio=0 cpu=1192715.16ms elapsed=723096.42s tid=0x00007fe79081eb00 nid=66 runnable  [0x00007fe7a9bfd000]\r\n   java.lang.Thread.State: RUNNABLE\r\n\tat kotlinx.coroutines.scheduling.CoroutineScheduler.signalCpuWork(CoroutineScheduler.kt:439)\r\n\tat kotlinx.coroutines.scheduling.CoroutineScheduler.dispatch(CoroutineScheduler.kt:415)\r\n\tat kotlinx.coroutines.scheduling.CoroutineScheduler.dispatch$default(CoroutineScheduler.kt:392)\r\n\tat kotlinx.coroutines.scheduling.SchedulerCoroutineDispatcher.dispatch(Dispatcher.kt:112)\r\n\tat kotlinx.coroutines.DispatchedTaskKt.dispatch(DispatchedTask.kt:161)\r\n\tat kotlinx.coroutines.CancellableContinuationImpl.dispatchResume(CancellableContinuationImpl.kt:474)\r\n\tat kotlinx.coroutines.CancellableContinuationImpl.completeResume(CancellableContinuationImpl.kt:590)\r\n\tat kotlinx.coroutines.selects.SelectKt.tryResume(Select.kt:842)\r\n\tat kotlinx.coroutines.selects.SelectKt.access$tryResume(Select.kt:1)\r\n\tat kotlinx.coroutines.selects.SelectImplementation.trySelectInternal(Select.kt:623)\r\n\tat kotlinx.coroutines.selects.SelectImplementation.trySelect(Select.kt:600)\r\n\tat kotlinx.coroutines.channels.BufferedChannel.tryResumeReceiver(BufferedChannel.kt:634)\r\n\tat kotlinx.coroutines.channels.BufferedChannel.updateCellSend(BufferedChannel.kt:458)\r\n\tat kotlinx.coroutines.channels.BufferedChannel.access$updateCellSend(BufferedChannel.kt:36)\r\n\tat kotlinx.coroutines.channels.BufferedChannel.send$suspendImpl(BufferedChannel.kt:3089)\r\n\tat kotlinx.coroutines.channels.BufferedChannel.send(BufferedChannel.kt)\r\n\tat kotlinx.coroutines.channels.ChannelCoroutine.send(ChannelCoroutine.kt)\r\n\tat kotlinx.coroutines.flow.internal.SendingCollector.emit(SendingCollector.kt:19)\r\n\tat com.now4real.server.backend.LsMessageUserListItemBeAdapter$consumeChannel$$inlined$filterIsInstance$1$2.emit(Emitters.kt:223)\r\n\tat kotlinx.coroutines.flow.SharedFlowImpl.collect$suspendImpl(SharedFlow.kt:382)\r\n\tat kotlinx.coroutines.flow.SharedFlowImpl$collect$1.invokeSuspend(SharedFlow.kt)\r\n\tat kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith(ContinuationImpl.kt:33)\r\n\tat kotlinx.coroutines.DispatchedTask.run(DispatchedTask.kt:108)\r\n\tat kotlinx.coroutines.scheduling.CoroutineScheduler.runSafely(CoroutineScheduler.kt:584)\r\n\tat kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.executeTask(CoroutineScheduler.kt:793)\r\n\tat kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker(CoroutineScheduler.kt:697)\r\n\tat kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run(CoroutineScheduler.kt:684)\r\n\r\n\"DefaultDispatcher-worker-6\" #326 [300] daemon prio=5 os_prio=0 cpu=1192787.63ms elapsed=723053.19s tid=0x00007fe79c32e4d0 nid=300 runnable  [0x00007fe7652e3000]\r\n   java.lang.Thread.State: RUNNABLE\r\n\tat kotlinx.coroutines.flow.SharedFlowImpl.updateCollectorIndexLocked$kotlinx_coroutines_core(SharedFlow.kt:774)\r\n\tat kotlinx.coroutines.flow.SharedFlowImpl.tryTakeValue(SharedFlow.kt:634)\r\n\t- locked <0x00000007f20bf098> (a kotlinx.coroutines.flow.SharedFlowImpl)\r\n\tat kotlinx.coroutines.flow.SharedFlowImpl.collect$suspendImpl(SharedFlow.kt:377)\r\n\tat kotlinx.coroutines.flow.SharedFlowImpl$collect$1.invokeSuspend(SharedFlow.kt)\r\n\tat kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith(ContinuationImpl.kt:33)\r\n\tat kotlinx.coroutines.DispatchedTask.run(DispatchedTask.kt:108)\r\n\tat kotlinx.coroutines.scheduling.CoroutineScheduler.runSafely(CoroutineScheduler.kt:584)\r\n\tat kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.executeTask(CoroutineScheduler.kt:793)\r\n\tat kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker(CoroutineScheduler.kt:697)\r\n\tat kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run(CoroutineScheduler.kt:684)\r\n~~~\r\n\r\nUnfornutately I am not able to provide a reproducer, we don't have idea how can cause this issue in our code. Secondary, this version of our server is running from Jan 8, 2024 without issue.\r\n\r\nOur code use lesser 1% of CPU (`SharedFlowImpl.emit`), should we check some API usage that can cause this issue?",
        "reactions": {
            "url": "https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/4030/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/4030/timeline",
        "performed_via_github_app": null,
        "state_reason": null
    },
    {
        "url": "https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/4026",
        "repository_url": "https://api.github.com/repos/Kotlin/kotlinx.coroutines",
        "labels_url": "https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/4026/labels{/name}",
        "comments_url": "https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/4026/comments",
        "events_url": "https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/4026/events",
        "html_url": "https://github.com/Kotlin/kotlinx.coroutines/issues/4026",
        "id": 2103945049,
        "node_id": "I_kwDOA63QcM59Z6dZ",
        "number": 4026,
        "title": "`MutexImpl.unlock()` hangs forever when locked through `Semaphore.aquire()`",
        "user": {
            "login": "lukellmann",
            "id": 47486203,
            "node_id": "MDQ6VXNlcjQ3NDg2MjAz",
            "avatar_url": "https://avatars.githubusercontent.com/u/47486203?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/lukellmann",
            "html_url": "https://github.com/lukellmann",
            "followers_url": "https://api.github.com/users/lukellmann/followers",
            "following_url": "https://api.github.com/users/lukellmann/following{/other_user}",
            "gists_url": "https://api.github.com/users/lukellmann/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/lukellmann/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/lukellmann/subscriptions",
            "organizations_url": "https://api.github.com/users/lukellmann/orgs",
            "repos_url": "https://api.github.com/users/lukellmann/repos",
            "events_url": "https://api.github.com/users/lukellmann/events{/privacy}",
            "received_events_url": "https://api.github.com/users/lukellmann/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 396785977,
                "node_id": "MDU6TGFiZWwzOTY3ODU5Nzc=",
                "url": "https://api.github.com/repos/Kotlin/kotlinx.coroutines/labels/bug",
                "name": "bug",
                "color": "ee0701",
                "default": true,
                "description": null
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [

        ],
        "milestone": null,
        "comments": 4,
        "created_at": "2024-01-28T03:31:12Z",
        "updated_at": "2024-01-29T13:35:54Z",
        "closed_at": null,
        "author_association": "CONTRIBUTOR",
        "active_lock_reason": null,
        "body": "The following code hangs forever on the call to `mutex.unlock()`:\n```kt\nval mutex = Mutex()\n(mutex as Semaphore).aquire()\nprintln(\"locked: ${mutex.isLocked}\")\nmutex.unlock()\nprintln(\"unlocked: ${!mutex.isLocked}\")\n```\n\nThe reason seems to be that `MutexImpl` extends `SemaphoreImpl` but `SemaphoreImpl.aquire()` bypasses the invariants of `MutexImpl.owner`: `aquire` doesn't change `owner` but `unlock` spin loops because it expects to see something different than `NO_OWNER`.\n\nSimilar bugs might be possible with other combinations of `Mutex` and `Semaphore` calls for `MutexImpl`, I haven't checked yet.\n\nAdmittedly, this is a bit contrived, so I'm not sure if this is really a bug or just a missuse of implementatiom details (the public `Mutex` interface doesn't extend `Semaphore`). But if this is considered worth fixing I see two possible approaches:\n* changing the behavior of the `SemaphoreImpl` methods (through override etc.) so they don't break `MutexImpl` invariants\n* splitting up `SemaphoreImpl` into a new abstract base type for both `Mutex` and `Semaphore` (that however doesn't implement `Semaphore` directly) and a thin wrapper around it to actually implement `Semaphore` - that way interacting with instances of `MutexImpl` through the methods of `Semaphore` won't be possible in the first place",
        "reactions": {
            "url": "https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/4026/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/4026/timeline",
        "performed_via_github_app": null,
        "state_reason": null
    },
    {
        "url": "https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/4025",
        "repository_url": "https://api.github.com/repos/Kotlin/kotlinx.coroutines",
        "labels_url": "https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/4025/labels{/name}",
        "comments_url": "https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/4025/comments",
        "events_url": "https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/4025/events",
        "html_url": "https://github.com/Kotlin/kotlinx.coroutines/issues/4025",
        "id": 2103585503,
        "node_id": "I_kwDOA63QcM59Yirf",
        "number": 4025,
        "title": "Proguard will remove SwingDispatcherFactory (MainDispatcherFactory) on JVM",
        "user": {
            "login": "mikedawson",
            "id": 4280622,
            "node_id": "MDQ6VXNlcjQyODA2MjI=",
            "avatar_url": "https://avatars.githubusercontent.com/u/4280622?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/mikedawson",
            "html_url": "https://github.com/mikedawson",
            "followers_url": "https://api.github.com/users/mikedawson/followers",
            "following_url": "https://api.github.com/users/mikedawson/following{/other_user}",
            "gists_url": "https://api.github.com/users/mikedawson/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/mikedawson/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/mikedawson/subscriptions",
            "organizations_url": "https://api.github.com/users/mikedawson/orgs",
            "repos_url": "https://api.github.com/users/mikedawson/repos",
            "events_url": "https://api.github.com/users/mikedawson/events{/privacy}",
            "received_events_url": "https://api.github.com/users/mikedawson/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 742220755,
                "node_id": "MDU6TGFiZWw3NDIyMjA3NTU=",
                "url": "https://api.github.com/repos/Kotlin/kotlinx.coroutines/labels/docs",
                "name": "docs",
                "color": "6b87ce",
                "default": false,
                "description": ""
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [

        ],
        "milestone": null,
        "comments": 10,
        "created_at": "2024-01-27T13:21:24Z",
        "updated_at": "2024-02-13T11:09:41Z",
        "closed_at": null,
        "author_association": "NONE",
        "active_lock_reason": null,
        "body": "<!--\r\n**Double-check**\r\n\r\n* Is this *really* a bug?\r\n  - If the behavior is documented, but you disagree with it, please do file an issue, but as a \"Design consideration,\" not a \"Bug report.\"\r\n  - If you don't understand why something behaves the way it does, consider asking on [StackOverflow](https://stackoverflow.com/) or the [Kotlin Slack](https://surveys.jetbrains.com/s3/kotlin-slack-sign-up). The community is active and will likely clarify everything better than we could!\r\n* Is the problem not in some third-party library, not in [Kotlin](kotl.in/issue), or your own code—is it in the `kotlinx.coroutines` library itself?\r\n  - Example: you write for Android, and your code works properly on most devices, but for a couple of them, it fails. Then please direct this to Google and/or the manufacturer of your device.\r\n* Maybe you're using some ancient version, and the problem doesn't happen with the latest releases of the compiler and the library?\r\n-->\r\n\r\n**Describe the bug**\r\n\r\nIf you use Proguard on JVM (e.g. as part of a Compose/Desktop application as per [compose docs](https://github.com/JetBrains/compose-multiplatform/tree/master/tutorials/Native_distributions_and_local_execution#minification--obfuscation)), then the MainDispatcherFactory is removed. When the application runs, it crashes because there is no main dispatcher.\r\n\r\nThe following Proguard rules are required:\r\n```\r\n-keep class kotlinx.coroutines.internal.MainDispatcherFactory { *; }\r\n-keep class kotlinx.coroutines.swing.SwingDispatcherFactory { *; }\r\n\r\n```\r\n\r\nProguard on Desktop/JVM doesn't have automatic rule consumption like Android, so documenting the requirement e.g. here https://github.com/Kotlin/kotlinx.coroutines#r8-and-proguard is critical.\r\n\r\n**Provide a Reproducer**\r\n\r\nThis can be reproduced from this branch of our code:\r\nhttps://github.com/UstadMobile/UstadMobile/tree/dev-desktop-conveyor\r\n\r\nRemove the above lines from app-desktop/compose-desktop.pro , and the crash will be observed.\r\n\r\nAlternatively:\r\n1. Create a new Compose JVM/Desktop app\r\n2.  Enable obfuscation as per [compose docs](https://github.com/JetBrains/compose-multiplatform/tree/master/tutorials/Native_distributions_and_local_execution#minification--obfuscation)) \r\n3. Run it.\r\n\r\n\r\n",
        "reactions": {
            "url": "https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/4025/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/4025/timeline",
        "performed_via_github_app": null,
        "state_reason": null
    },
    {
        "url": "https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/4023",
        "repository_url": "https://api.github.com/repos/Kotlin/kotlinx.coroutines",
        "labels_url": "https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/4023/labels{/name}",
        "comments_url": "https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/4023/comments",
        "events_url": "https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/4023/events",
        "html_url": "https://github.com/Kotlin/kotlinx.coroutines/issues/4023",
        "id": 2100438239,
        "node_id": "I_kwDOA63QcM59MiTf",
        "number": 4023,
        "title": "Ability to specify a limited dispatcher name",
        "user": {
            "login": "dovchinnikov",
            "id": 5519549,
            "node_id": "MDQ6VXNlcjU1MTk1NDk=",
            "avatar_url": "https://avatars.githubusercontent.com/u/5519549?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/dovchinnikov",
            "html_url": "https://github.com/dovchinnikov",
            "followers_url": "https://api.github.com/users/dovchinnikov/followers",
            "following_url": "https://api.github.com/users/dovchinnikov/following{/other_user}",
            "gists_url": "https://api.github.com/users/dovchinnikov/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/dovchinnikov/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/dovchinnikov/subscriptions",
            "organizations_url": "https://api.github.com/users/dovchinnikov/orgs",
            "repos_url": "https://api.github.com/users/dovchinnikov/repos",
            "events_url": "https://api.github.com/users/dovchinnikov/events{/privacy}",
            "received_events_url": "https://api.github.com/users/dovchinnikov/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 396785979,
                "node_id": "MDU6TGFiZWwzOTY3ODU5Nzk=",
                "url": "https://api.github.com/repos/Kotlin/kotlinx.coroutines/labels/enhancement",
                "name": "enhancement",
                "color": "84b6eb",
                "default": true,
                "description": null
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [

        ],
        "milestone": null,
        "comments": 2,
        "created_at": "2024-01-25T13:46:09Z",
        "updated_at": "2024-02-06T17:33:06Z",
        "closed_at": null,
        "author_association": "CONTRIBUTOR",
        "active_lock_reason": null,
        "body": "**Use case**\r\n\r\nWe have specific dispatchers, and in coroutine dumps they all look like `LimitedDispatcher@xxxxxxxx`, and it's not immediately clear where the dispatcher comes from.\r\n\r\n**The Shape of the API**\r\n\r\nMake `kotlinx.coroutines.CoroutineDispatcher.limitedParallelism` accept `debugName: String?`. \r\n\r\nAlternatively, make an extension function `fun CoroutineDispatcher.namedDispatcher(debugName: String): CoroutineDispatcher` which will return a dispatcher, which delegates to `this` and has its `toString` overridden. It can return `this` as is when debug is off.\r\n\r\n**Prior Art**\r\n\r\n`kotlinx.coroutines.scheduling.LimitingDispatcher` has `name`.",
        "reactions": {
            "url": "https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/4023/reactions",
            "total_count": 1,
            "+1": 1,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/4023/timeline",
        "performed_via_github_app": null,
        "state_reason": null
    },
    {
        "url": "https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/4022",
        "repository_url": "https://api.github.com/repos/Kotlin/kotlinx.coroutines",
        "labels_url": "https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/4022/labels{/name}",
        "comments_url": "https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/4022/comments",
        "events_url": "https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/4022/events",
        "html_url": "https://github.com/Kotlin/kotlinx.coroutines/issues/4022",
        "id": 2099269370,
        "node_id": "I_kwDOA63QcM59IE76",
        "number": 4022,
        "title": "Wrong Dispatcher used when used with Live Edit",
        "user": {
            "login": "acleung",
            "id": 1622106,
            "node_id": "MDQ6VXNlcjE2MjIxMDY=",
            "avatar_url": "https://avatars.githubusercontent.com/u/1622106?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/acleung",
            "html_url": "https://github.com/acleung",
            "followers_url": "https://api.github.com/users/acleung/followers",
            "following_url": "https://api.github.com/users/acleung/following{/other_user}",
            "gists_url": "https://api.github.com/users/acleung/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/acleung/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/acleung/subscriptions",
            "organizations_url": "https://api.github.com/users/acleung/orgs",
            "repos_url": "https://api.github.com/users/acleung/repos",
            "events_url": "https://api.github.com/users/acleung/events{/privacy}",
            "received_events_url": "https://api.github.com/users/acleung/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 396785982,
                "node_id": "MDU6TGFiZWwzOTY3ODU5ODI=",
                "url": "https://api.github.com/repos/Kotlin/kotlinx.coroutines/labels/question",
                "name": "question",
                "color": "cc317c",
                "default": true,
                "description": null
            },
            {
                "id": 1411045241,
                "node_id": "MDU6TGFiZWwxNDExMDQ1MjQx",
                "url": "https://api.github.com/repos/Kotlin/kotlinx.coroutines/labels/android",
                "name": "android",
                "color": "e99695",
                "default": false,
                "description": ""
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [

        ],
        "milestone": null,
        "comments": 4,
        "created_at": "2024-01-24T23:05:40Z",
        "updated_at": "2024-01-26T18:06:04Z",
        "closed_at": null,
        "author_association": "NONE",
        "active_lock_reason": null,
        "body": "Hello:\r\n\r\nThis is Alan from the Android Studio Live Edit team. I am looking at a reported issue with related [coroutine and Live Edit](https://issuetracker.google.com/issues/269627284#comment14).\r\n\r\n**Describe the bug**\r\n\r\nYou can find more details in the bug itself but here is a summary:\r\n\r\nWe noticed that when a coroutine has been dispatched to a worker, the current coroutine is resumed on that worker as well.\r\n\r\nConsider this code:\r\n\r\n```\r\nclass ContextBug {\r\n    companion object {\r\n        @JvmStatic\r\n        fun Launch() {\r\n            runBlocking() {\r\n                Log.d(\"DEBUG\", \">>>> Should be main: ${Thread.currentThread().name} having context: ${currentCoroutineContext()}\")\r\n                withContext(Dispatchers.IO) {\r\n                    Log.d(\"DEBUG\", \">>> Should be DefaultDispatcher-worker: ${Thread.currentThread().name} having context: ${currentCoroutineContext()}\")\r\n                }\r\n                Log.d(\"DEBUG\", \">>>> Should be main: ${Thread.currentThread().name} having context: ${currentCoroutineContext()}\")\r\n            }\r\n        }\r\n    }\r\n}\r\n```\r\nA normal execution would yield:\r\n\r\n```\r\nDEBUG                   com.example.myapplication            D  >>>> Should be main: main having context: [BlockingCoroutine{Active}@24fa393, BlockingEventLoop@6719fd0]\r\nDEBUG                   com.example.myapplication            D  >>> Should be DefaultDispatcher-worker: DefaultDispatcher-worker-1 having context: [DispatchedCoroutine{Active}@7f29bc9, Dispatchers.IO]\r\nDEBUG                   com.example.myapplication            D  >>>> Should be main: main having context: [BlockingCoroutine{Active}@24fa393, BlockingEventLoop@6719fd0]\r\n```\r\n\r\nWhile with Live Edit, it would yield:\r\n\r\n```\r\nDEBUG                   com.example.myapplication            D  >>>> Should be main: main having context: [BlockingCoroutine{Active}@d07c13e, BlockingEventLoop@d225b9f]\r\nDEBUG                   com.example.myapplication            D  >>> Should be DefaultDispatcher-worker: DefaultDispatcher-worker-1 having context: [DispatchedCoroutine{Active}@b85a4ec, Dispatchers.IO]\r\nDEBUG                   com.example.myapplication            D  >>>> Should be main: DefaultDispatcher-worker-1 having context: [BlockingCoroutine{Active}@d07c13e, BlockingEventLoop@d225b9f]\r\n```\r\nNoticed that `Thread.currentThread()` is the worker while the `currentCoroutineContext()` is still pointing the same one that was created for `runBlocking()`.\r\n\r\n**Provide a Reproducer**\r\n\r\n1. Download latest version of Android Studio Canary and install.\r\n2. Using the Android Studio project wizard, create an \"Empty Activity\". The default should be a Kotlin / Compose project being created.\r\n3. Set up an working Android emulator or connect an Android device.\r\n4. Enable Live Edit: File -> Settings -> Editor -> Live Edit (Push Edit Automatically)\r\n5. Create a new file `ContextBug.kt` and paste the above code into it\r\n6. In the `MainActivity.kt` of the project, add the following line to the `Greeting()` method:      `Redirect().redirect()`\r\n7. Run the program, observe the logcat\r\n8. Perform any trivial Live Edit in `Redirect.kt` (adding empty spaces to any of the output strings should trigger live update)\r\n9. Observe the logcat again and note that even while the `Context` is still pointing at the `runBlocking` one, `Thread.currentThread` is still the worker. \r\n",
        "reactions": {
            "url": "https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/4022/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/4022/timeline",
        "performed_via_github_app": null,
        "state_reason": null
    },
    {
        "url": "https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/4019",
        "repository_url": "https://api.github.com/repos/Kotlin/kotlinx.coroutines",
        "labels_url": "https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/4019/labels{/name}",
        "comments_url": "https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/4019/comments",
        "events_url": "https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/4019/events",
        "html_url": "https://github.com/Kotlin/kotlinx.coroutines/issues/4019",
        "id": 2092963542,
        "node_id": "I_kwDOA63QcM58wBbW",
        "number": 4019,
        "title": "about Flow<Flow<T>>.flattenMerge and stateflow.",
        "user": {
            "login": "yangwuan55",
            "id": 5218120,
            "node_id": "MDQ6VXNlcjUyMTgxMjA=",
            "avatar_url": "https://avatars.githubusercontent.com/u/5218120?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/yangwuan55",
            "html_url": "https://github.com/yangwuan55",
            "followers_url": "https://api.github.com/users/yangwuan55/followers",
            "following_url": "https://api.github.com/users/yangwuan55/following{/other_user}",
            "gists_url": "https://api.github.com/users/yangwuan55/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/yangwuan55/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/yangwuan55/subscriptions",
            "organizations_url": "https://api.github.com/users/yangwuan55/orgs",
            "repos_url": "https://api.github.com/users/yangwuan55/repos",
            "events_url": "https://api.github.com/users/yangwuan55/events{/privacy}",
            "received_events_url": "https://api.github.com/users/yangwuan55/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 396785979,
                "node_id": "MDU6TGFiZWwzOTY3ODU5Nzk=",
                "url": "https://api.github.com/repos/Kotlin/kotlinx.coroutines/labels/enhancement",
                "name": "enhancement",
                "color": "84b6eb",
                "default": true,
                "description": null
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [

        ],
        "milestone": null,
        "comments": 1,
        "created_at": "2024-01-22T02:46:35Z",
        "updated_at": "2024-01-25T06:47:18Z",
        "closed_at": null,
        "author_association": "NONE",
        "active_lock_reason": null,
        "body": "I see the 1.8.0RC add the method flattenMerge for flatten flows,so I want know that if there has some stateFlow in one StateFlow:\r\nlike this\r\n\r\n```\r\nval stateFlowParent:StateFlow<StateFlow<Int>> \r\n...\r\nstateFlowParent\r\n    .flattenMerge()\r\n    .onEach {\r\n        //Is there a repeat output here?\r\n    }.launchIn(someScope)\r\n```\r\n\r\nMore specifically, due to the long life of Stateflow, when a Stateflow is returned in flatmap, the Stateflow will not be canceled (I do not know how to cancel, unless I add a job variable to control the collection and cancellation of Stateflow). So the allowable parameter of the newly added flattenMerge is Stateflow? Thanks, it depends if I want to upgrade my repository version.",
        "reactions": {
            "url": "https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/4019/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/4019/timeline",
        "performed_via_github_app": null,
        "state_reason": null
    },
    {
        "url": "https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/4018",
        "repository_url": "https://api.github.com/repos/Kotlin/kotlinx.coroutines",
        "labels_url": "https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/4018/labels{/name}",
        "comments_url": "https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/4018/comments",
        "events_url": "https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/4018/events",
        "html_url": "https://github.com/Kotlin/kotlinx.coroutines/pull/4018",
        "id": 2092677630,
        "node_id": "PR_kwDOA63QcM5kqBOA",
        "number": 4018,
        "title": "Extract example output from comment to text block",
        "user": {
            "login": "zUniQueX",
            "id": 36885591,
            "node_id": "MDQ6VXNlcjM2ODg1NTkx",
            "avatar_url": "https://avatars.githubusercontent.com/u/36885591?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/zUniQueX",
            "html_url": "https://github.com/zUniQueX",
            "followers_url": "https://api.github.com/users/zUniQueX/followers",
            "following_url": "https://api.github.com/users/zUniQueX/following{/other_user}",
            "gists_url": "https://api.github.com/users/zUniQueX/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/zUniQueX/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/zUniQueX/subscriptions",
            "organizations_url": "https://api.github.com/users/zUniQueX/orgs",
            "repos_url": "https://api.github.com/users/zUniQueX/repos",
            "events_url": "https://api.github.com/users/zUniQueX/events{/privacy}",
            "received_events_url": "https://api.github.com/users/zUniQueX/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [

        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [

        ],
        "milestone": null,
        "comments": 0,
        "created_at": "2024-01-21T17:15:07Z",
        "updated_at": "2024-01-21T17:15:07Z",
        "closed_at": null,
        "author_association": "NONE",
        "active_lock_reason": null,
        "draft": false,
        "pull_request": {
            "url": "https://api.github.com/repos/Kotlin/kotlinx.coroutines/pulls/4018",
            "html_url": "https://github.com/Kotlin/kotlinx.coroutines/pull/4018",
            "diff_url": "https://github.com/Kotlin/kotlinx.coroutines/pull/4018.diff",
            "patch_url": "https://github.com/Kotlin/kotlinx.coroutines/pull/4018.patch",
            "merged_at": null
        },
        "body": "Recently I've come across the flow docs and noticed one example output isn't displayed in the online version.\r\n\r\nIn the source file the output is present but hidden inside an XML comment.\r\n\r\nI've extracted the output to a text block to display it in the online docs.",
        "reactions": {
            "url": "https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/4018/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/4018/timeline",
        "performed_via_github_app": null,
        "state_reason": null
    },
    {
        "url": "https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/4014",
        "repository_url": "https://api.github.com/repos/Kotlin/kotlinx.coroutines",
        "labels_url": "https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/4014/labels{/name}",
        "comments_url": "https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/4014/comments",
        "events_url": "https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/4014/events",
        "html_url": "https://github.com/Kotlin/kotlinx.coroutines/pull/4014",
        "id": 2084471557,
        "node_id": "PR_kwDOA63QcM5kOLe_",
        "number": 4014,
        "title": "Bobova/k2 migrations",
        "user": {
            "login": "woainikk",
            "id": 32216159,
            "node_id": "MDQ6VXNlcjMyMjE2MTU5",
            "avatar_url": "https://avatars.githubusercontent.com/u/32216159?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/woainikk",
            "html_url": "https://github.com/woainikk",
            "followers_url": "https://api.github.com/users/woainikk/followers",
            "following_url": "https://api.github.com/users/woainikk/following{/other_user}",
            "gists_url": "https://api.github.com/users/woainikk/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/woainikk/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/woainikk/subscriptions",
            "organizations_url": "https://api.github.com/users/woainikk/orgs",
            "repos_url": "https://api.github.com/users/woainikk/repos",
            "events_url": "https://api.github.com/users/woainikk/events{/privacy}",
            "received_events_url": "https://api.github.com/users/woainikk/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [

        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [

        ],
        "milestone": null,
        "comments": 0,
        "created_at": "2024-01-16T17:17:10Z",
        "updated_at": "2024-01-19T13:12:27Z",
        "closed_at": null,
        "author_association": "CONTRIBUTOR",
        "active_lock_reason": null,
        "draft": false,
        "pull_request": {
            "url": "https://api.github.com/repos/Kotlin/kotlinx.coroutines/pulls/4014",
            "html_url": "https://github.com/Kotlin/kotlinx.coroutines/pull/4014",
            "diff_url": "https://github.com/Kotlin/kotlinx.coroutines/pull/4014.diff",
            "patch_url": "https://github.com/Kotlin/kotlinx.coroutines/pull/4014.patch",
            "merged_at": null
        },
        "body": null,
        "reactions": {
            "url": "https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/4014/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/4014/timeline",
        "performed_via_github_app": null,
        "state_reason": null
    },
    {
        "url": "https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/4010",
        "repository_url": "https://api.github.com/repos/Kotlin/kotlinx.coroutines",
        "labels_url": "https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/4010/labels{/name}",
        "comments_url": "https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/4010/comments",
        "events_url": "https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/4010/events",
        "html_url": "https://github.com/Kotlin/kotlinx.coroutines/pull/4010",
        "id": 2072600088,
        "node_id": "PR_kwDOA63QcM5jlxgW",
        "number": 4010,
        "title": "Rework CompletionHandler to avoid subclassing a functional type",
        "user": {
            "login": "dkhalanskyjb",
            "id": 52952525,
            "node_id": "MDQ6VXNlcjUyOTUyNTI1",
            "avatar_url": "https://avatars.githubusercontent.com/u/52952525?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/dkhalanskyjb",
            "html_url": "https://github.com/dkhalanskyjb",
            "followers_url": "https://api.github.com/users/dkhalanskyjb/followers",
            "following_url": "https://api.github.com/users/dkhalanskyjb/following{/other_user}",
            "gists_url": "https://api.github.com/users/dkhalanskyjb/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/dkhalanskyjb/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/dkhalanskyjb/subscriptions",
            "organizations_url": "https://api.github.com/users/dkhalanskyjb/orgs",
            "repos_url": "https://api.github.com/users/dkhalanskyjb/repos",
            "events_url": "https://api.github.com/users/dkhalanskyjb/events{/privacy}",
            "received_events_url": "https://api.github.com/users/dkhalanskyjb/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [

        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [

        ],
        "milestone": null,
        "comments": 2,
        "created_at": "2024-01-09T15:26:58Z",
        "updated_at": "2024-02-16T12:02:26Z",
        "closed_at": null,
        "author_association": "COLLABORATOR",
        "active_lock_reason": null,
        "draft": false,
        "pull_request": {
            "url": "https://api.github.com/repos/Kotlin/kotlinx.coroutines/pulls/4010",
            "html_url": "https://github.com/Kotlin/kotlinx.coroutines/pull/4010",
            "diff_url": "https://github.com/Kotlin/kotlinx.coroutines/pull/4010.diff",
            "patch_url": "https://github.com/Kotlin/kotlinx.coroutines/pull/4010.patch",
            "merged_at": null
        },
        "body": "Workaround for KT-64075",
        "reactions": {
            "url": "https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/4010/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/4010/timeline",
        "performed_via_github_app": null,
        "state_reason": null
    },
    {
        "url": "https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/4008",
        "repository_url": "https://api.github.com/repos/Kotlin/kotlinx.coroutines",
        "labels_url": "https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/4008/labels{/name}",
        "comments_url": "https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/4008/comments",
        "events_url": "https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/4008/events",
        "html_url": "https://github.com/Kotlin/kotlinx.coroutines/issues/4008",
        "id": 2068317163,
        "node_id": "I_kwDOA63QcM57SAPr",
        "number": 4008,
        "title": "Feature Request: add a hot flow abstraction that can be complete()d or error()ed from the emitter side",
        "user": {
            "login": "climategadgets",
            "id": 1731579,
            "node_id": "MDQ6VXNlcjE3MzE1Nzk=",
            "avatar_url": "https://avatars.githubusercontent.com/u/1731579?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/climategadgets",
            "html_url": "https://github.com/climategadgets",
            "followers_url": "https://api.github.com/users/climategadgets/followers",
            "following_url": "https://api.github.com/users/climategadgets/following{/other_user}",
            "gists_url": "https://api.github.com/users/climategadgets/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/climategadgets/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/climategadgets/subscriptions",
            "organizations_url": "https://api.github.com/users/climategadgets/orgs",
            "repos_url": "https://api.github.com/users/climategadgets/repos",
            "events_url": "https://api.github.com/users/climategadgets/events{/privacy}",
            "received_events_url": "https://api.github.com/users/climategadgets/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 396785979,
                "node_id": "MDU6TGFiZWwzOTY3ODU5Nzk=",
                "url": "https://api.github.com/repos/Kotlin/kotlinx.coroutines/labels/enhancement",
                "name": "enhancement",
                "color": "84b6eb",
                "default": true,
                "description": null
            },
            {
                "id": 1312872054,
                "node_id": "MDU6TGFiZWwxMzEyODcyMDU0",
                "url": "https://api.github.com/repos/Kotlin/kotlinx.coroutines/labels/flow",
                "name": "flow",
                "color": "8917ed",
                "default": false,
                "description": ""
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [

        ],
        "milestone": null,
        "comments": 5,
        "created_at": "2024-01-06T02:52:18Z",
        "updated_at": "2024-01-22T15:34:21Z",
        "closed_at": null,
        "author_association": "NONE",
        "active_lock_reason": null,
        "body": "## Use case\r\n\r\nAny hot flow of limited size, or unlimited flow that can complete abnormally. Examples:\r\n* A pipeline driven by external source (say, a streaming HTTP request parser producing a number of elements)\r\n* An I/O driven pipeline (\"read from here forever and put into this flow... oops, network error\")\r\n\r\n## The Shape of the API\r\n\r\n### Current Behavior\r\n\r\n* There is a `MutableSharedFlow`, but the only operation that communicates data to the consumer is `emit()` (per documentation, \"`SharedFlow` never ends\"). It is not possible to communicate neither completion, nor an error.\r\n* This behavior is already supported by channels, but they are a different abstraction that can't be reused here without adapters.\r\n\r\n### Desired Behavior\r\n\r\n* Emitter side: add `complete()` and `error(cause)` operations.\r\n* Consumer side: no chances, existing abstractions already support this.\r\n\r\n## Prior Art\r\n\r\nProject Reactor [Sinks.Many](https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Sinks.Many.html) [tryEmitComplete()](https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Sinks.Many.html#tryEmitComplete--), [tryEmitError(error)](https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Sinks.Many.html#tryEmitError-java.lang.Throwable-)\r\n\r\n#### Note about \"non-example\" remark from the issue template\r\n\r\nThis feature is requested not because it is present in Reactor, but because it is a logical extension of flow behavior. This behavior is already implicitly supported by cold flows (`complete()` happens upon the end of the flow originating set, and `error()` happens upon throwing an exception from within the flow source), and channels. Having this feature present in the flow will make the behavior uniform across different flow kinds (cold and hot) and make channel adapters behave in a more predictable way.",
        "reactions": {
            "url": "https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/4008/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/4008/timeline",
        "performed_via_github_app": null,
        "state_reason": null
    },
    {
        "url": "https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/4006",
        "repository_url": "https://api.github.com/repos/Kotlin/kotlinx.coroutines",
        "labels_url": "https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/4006/labels{/name}",
        "comments_url": "https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/4006/comments",
        "events_url": "https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/4006/events",
        "html_url": "https://github.com/Kotlin/kotlinx.coroutines/issues/4006",
        "id": 2065161900,
        "node_id": "I_kwDOA63QcM57F96s",
        "number": 4006,
        "title": "`stateIn` with `SharingStarted.Eagerly` doesn't really immediately start collecting",
        "user": {
            "login": "dkhalanskyjb",
            "id": 52952525,
            "node_id": "MDQ6VXNlcjUyOTUyNTI1",
            "avatar_url": "https://avatars.githubusercontent.com/u/52952525?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/dkhalanskyjb",
            "html_url": "https://github.com/dkhalanskyjb",
            "followers_url": "https://api.github.com/users/dkhalanskyjb/followers",
            "following_url": "https://api.github.com/users/dkhalanskyjb/following{/other_user}",
            "gists_url": "https://api.github.com/users/dkhalanskyjb/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/dkhalanskyjb/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/dkhalanskyjb/subscriptions",
            "organizations_url": "https://api.github.com/users/dkhalanskyjb/orgs",
            "repos_url": "https://api.github.com/users/dkhalanskyjb/repos",
            "events_url": "https://api.github.com/users/dkhalanskyjb/events{/privacy}",
            "received_events_url": "https://api.github.com/users/dkhalanskyjb/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 2057982217,
                "node_id": "MDU6TGFiZWwyMDU3OTgyMjE3",
                "url": "https://api.github.com/repos/Kotlin/kotlinx.coroutines/labels/flow-sharing",
                "name": "flow-sharing",
                "color": "d4c5f9",
                "default": false,
                "description": ""
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [

        ],
        "milestone": null,
        "comments": 0,
        "created_at": "2024-01-04T07:45:09Z",
        "updated_at": "2024-01-04T07:45:09Z",
        "closed_at": null,
        "author_association": "COLLABORATOR",
        "active_lock_reason": null,
        "body": "An example was submitted to us (slightly simplified):\r\n```kotlin\r\nrunBlocking {\r\n    val sharedFlow = MutableSharedFlow<Int>()\r\n    val stateFlow = sharedFlow.stateIn(this, SharingStarted.Eagerly, 0)\r\n\r\n    check(stateFlow.value == 0)\r\n    sharedFlow.emit(1)\r\n    delay(1.seconds)\r\n    check(stateFlow.value == 1) // fails\r\n}\r\n```\r\nThe reason is that the subscription of `stateIn` only happens when the thread becomes available, which is only at `delay` in this example. Despite `Eagerly` promising that the subscription will happen immediately, the `emit` call is lost.\r\n\r\nAdding a `yield` after `stateIn` fixes the issue, as `stateIn` gets a chance to finish its initialization.\r\n\r\nThis behavior is actually intentional (https://github.com/Kotlin/kotlinx.coroutines/blob/1a0287ca3fb5d6c59594d62131e878da4929c5f8/kotlinx-coroutines-core/common/src/flow/operators/Share.kt#L206-L208): it's said that it's for the subscribers to have a chance to subscribe before the sharing starts. For example,\r\n\r\n```kotlin\r\nrunBlocking {\r\n    val myFlow = flow {\r\n        emit(1); emit(2)\r\n    }\r\n    val stateFlow = myFlow.stateIn(this, SharingStarted.Eagerly, 0)\r\n    launch(start = CoroutineStart.UNDISPATCHED) {\r\n      stateFlow.collect {\r\n        println(it) // guaranteed to observe the initial value 0\r\n      }\r\n    }\r\n}\r\n```\r\n\r\nThe code that ensures delivery of the initial element is tricky to write, as it requires knowingly starving the dispatcher of its threads that could perform the initialization code of `stateIn` in parallel. Also, the use cases are unclear, and it doesn't seem like this guarantee is even specified anywhere.\r\n\r\nWe should either document that `Eagerly` can sometimes fail to even run the initialization code of `collect` (for example, to subscribe to a shared flow) or change this behavior.",
        "reactions": {
            "url": "https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/4006/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/4006/timeline",
        "performed_via_github_app": null,
        "state_reason": null
    },
    {
        "url": "https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/4004",
        "repository_url": "https://api.github.com/repos/Kotlin/kotlinx.coroutines",
        "labels_url": "https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/4004/labels{/name}",
        "comments_url": "https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/4004/comments",
        "events_url": "https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/4004/events",
        "html_url": "https://github.com/Kotlin/kotlinx.coroutines/issues/4004",
        "id": 2060101990,
        "node_id": "I_kwDOA63QcM56yqlm",
        "number": 4004,
        "title": "Substantial mistake in documentation of Supervision",
        "user": {
            "login": "DorBSoft",
            "id": 80550437,
            "node_id": "MDQ6VXNlcjgwNTUwNDM3",
            "avatar_url": "https://avatars.githubusercontent.com/u/80550437?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/DorBSoft",
            "html_url": "https://github.com/DorBSoft",
            "followers_url": "https://api.github.com/users/DorBSoft/followers",
            "following_url": "https://api.github.com/users/DorBSoft/following{/other_user}",
            "gists_url": "https://api.github.com/users/DorBSoft/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/DorBSoft/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/DorBSoft/subscriptions",
            "organizations_url": "https://api.github.com/users/DorBSoft/orgs",
            "repos_url": "https://api.github.com/users/DorBSoft/repos",
            "events_url": "https://api.github.com/users/DorBSoft/events{/privacy}",
            "received_events_url": "https://api.github.com/users/DorBSoft/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 396785977,
                "node_id": "MDU6TGFiZWwzOTY3ODU5Nzc=",
                "url": "https://api.github.com/repos/Kotlin/kotlinx.coroutines/labels/bug",
                "name": "bug",
                "color": "ee0701",
                "default": true,
                "description": null
            },
            {
                "id": 742220755,
                "node_id": "MDU6TGFiZWw3NDIyMjA3NTU=",
                "url": "https://api.github.com/repos/Kotlin/kotlinx.coroutines/labels/docs",
                "name": "docs",
                "color": "6b87ce",
                "default": false,
                "description": ""
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [

        ],
        "milestone": null,
        "comments": 0,
        "created_at": "2023-12-29T14:24:19Z",
        "updated_at": "2024-01-18T09:45:16Z",
        "closed_at": null,
        "author_association": "NONE",
        "active_lock_reason": null,
        "body": "/docs/topics/exception-handling.md\r\n\r\nThe \"Supervision\" section appears to be wrong throughout its text by using the term \"cancellation\" instead of the term \"failure\".\r\nI.e. the text is suggesting it is about \"cancel()\", while it is actually about throwing any exception but \"CancellationException\".\r\n\r\n\"cancellation is a bidirectional relationship propagating through the whole hierarchy of coroutines.\". \r\nWrong. \"Failure is a bidirectional relationship...\". \"cancel()\" is one-directional. \r\n\r\n\"It is similar to a regular Job with the only exception that cancellation is propagated only downwards.\"\r\nWrong. \r\n\r\nIf there is a need, the fact that cancel() is not bidirectional can be easily seen by doing the following changed in the example code:\r\n\r\nval supervisor = coroutineContext//SupervisorJob()\r\n...\r\ncancel/*throw AssertionError*/(\"The first child is cancelled\")\r\n...\r\nsecondChild.join()//order replaced\r\nsupervisor.cancel()\r\n ",
        "reactions": {
            "url": "https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/4004/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/4004/timeline",
        "performed_via_github_app": null,
        "state_reason": null
    },
    {
        "url": "https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/3991",
        "repository_url": "https://api.github.com/repos/Kotlin/kotlinx.coroutines",
        "labels_url": "https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/3991/labels{/name}",
        "comments_url": "https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/3991/comments",
        "events_url": "https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/3991/events",
        "html_url": "https://github.com/Kotlin/kotlinx.coroutines/issues/3991",
        "id": 2046446807,
        "node_id": "I_kwDOA63QcM55-kzX",
        "number": 3991,
        "title": "Improve error handling for DispatchedTask being in invalid state: ",
        "user": {
            "login": "werner77",
            "id": 467589,
            "node_id": "MDQ6VXNlcjQ2NzU4OQ==",
            "avatar_url": "https://avatars.githubusercontent.com/u/467589?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/werner77",
            "html_url": "https://github.com/werner77",
            "followers_url": "https://api.github.com/users/werner77/followers",
            "following_url": "https://api.github.com/users/werner77/following{/other_user}",
            "gists_url": "https://api.github.com/users/werner77/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/werner77/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/werner77/subscriptions",
            "organizations_url": "https://api.github.com/users/werner77/orgs",
            "repos_url": "https://api.github.com/users/werner77/repos",
            "events_url": "https://api.github.com/users/werner77/events{/privacy}",
            "received_events_url": "https://api.github.com/users/werner77/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 396785977,
                "node_id": "MDU6TGFiZWwzOTY3ODU5Nzc=",
                "url": "https://api.github.com/repos/Kotlin/kotlinx.coroutines/labels/bug",
                "name": "bug",
                "color": "ee0701",
                "default": true,
                "description": null
            },
            {
                "id": 742220755,
                "node_id": "MDU6TGFiZWw3NDIyMjA3NTU=",
                "url": "https://api.github.com/repos/Kotlin/kotlinx.coroutines/labels/docs",
                "name": "docs",
                "color": "6b87ce",
                "default": false,
                "description": ""
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [

        ],
        "milestone": null,
        "comments": 3,
        "created_at": "2023-12-18T11:23:21Z",
        "updated_at": "2024-01-24T09:54:45Z",
        "closed_at": null,
        "author_association": "NONE",
        "active_lock_reason": null,
        "body": "<!--\r\n**Double-check**\r\n\r\n* Is this *really* a bug?\r\n  - If the behavior is documented, but you disagree with it, please do file an issue, but as a \"Design consideration,\" not a \"Bug report.\"\r\n  - If you don't understand why something behaves the way it does, consider asking on [StackOverflow](https://stackoverflow.com/) or the [Kotlin Slack](https://surveys.jetbrains.com/s3/kotlin-slack-sign-up). The community is active and will likely clarify everything better than we could!\r\n* Is the problem not in some third-party library, not in [Kotlin](kotl.in/issue), or your own code—is it in the `kotlinx.coroutines` library itself?\r\n  - Example: you write for Android, and your code works properly on most devices, but for a couple of them, it fails. Then please direct this to Google and/or the manufacturer of your device.\r\n* Maybe you're using some ancient version, and the problem doesn't happen with the latest releases of the compiler and the library?\r\n-->\r\n\r\n**Describe the bug**\r\n\r\nThe primary crash in our Kotlin Multiplatform project is related to the following force cast in `DispatchedTask.kt`:\r\n\r\n```\r\nfinal override fun run() {\r\n        assert { resumeMode != MODE_UNINITIALIZED } // should have been set before dispatching\r\n        val taskContext = this.taskContext\r\n        var fatalException: Throwable? = null\r\n        try {\r\n            val delegate = delegate as DispatchedContinuation<T> // CRASH here: delegate is CompletedContinuation\r\n            val continuation = delegate.continuation\r\n            withContinuationContext(continuation, delegate.countOrElement) {\r\n```\r\n\r\nIn crashlytics the exception is shown as follows: \r\n\r\n```           \r\nFatal Exception: kotlinx.coroutines.CoroutinesInternalError\r\nFatal exception in coroutines machinery for DispatchedContinuation[MainDispatcher, Continuation @ 0]. Please read KDoc to 'handleFatalException' method and report this incident to maintainers Caused by: kotlin.ClassCastException: class kotlin.coroutines.native.internal.CompletedContinuation cannot be cast to class kotlinx.coroutines.internal.DispatchedContinuation\r\n```\r\n\r\nNow I understand this crash may be caused by invalid usage of the API, however a class cast exception should never occur. Also it is very hard to debug this way. As of yet, I have no clue if we cause this error ourselves or one of the libraries (e.g. KTOR) causes it. \r\n\r\nI propose a solution where at the point the invalid call is made an IllegalStateException or similar exception is thrown, describing the invalid usage of the API, so the code can be fixed at that point.\r\n\r\n**Provide a Reproducer**\r\n\r\nI unfortunately don't know how to exactly reproduce this problem. I don't know which call causes this error. ",
        "reactions": {
            "url": "https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/3991/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/3991/timeline",
        "performed_via_github_app": null,
        "state_reason": null
    },
    {
        "url": "https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/3987",
        "repository_url": "https://api.github.com/repos/Kotlin/kotlinx.coroutines",
        "labels_url": "https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/3987/labels{/name}",
        "comments_url": "https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/3987/comments",
        "events_url": "https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/3987/events",
        "html_url": "https://github.com/Kotlin/kotlinx.coroutines/pull/3987",
        "id": 2040517032,
        "node_id": "PR_kwDOA63QcM5h8K5H",
        "number": 3987,
        "title": "Debug API for stepping through a coroutine execution",
        "user": {
            "login": "mvicsokolova",
            "id": 82594708,
            "node_id": "MDQ6VXNlcjgyNTk0NzA4",
            "avatar_url": "https://avatars.githubusercontent.com/u/82594708?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/mvicsokolova",
            "html_url": "https://github.com/mvicsokolova",
            "followers_url": "https://api.github.com/users/mvicsokolova/followers",
            "following_url": "https://api.github.com/users/mvicsokolova/following{/other_user}",
            "gists_url": "https://api.github.com/users/mvicsokolova/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/mvicsokolova/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/mvicsokolova/subscriptions",
            "organizations_url": "https://api.github.com/users/mvicsokolova/orgs",
            "repos_url": "https://api.github.com/users/mvicsokolova/repos",
            "events_url": "https://api.github.com/users/mvicsokolova/events{/privacy}",
            "received_events_url": "https://api.github.com/users/mvicsokolova/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [

        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [

        ],
        "milestone": null,
        "comments": 30,
        "created_at": "2023-12-13T21:45:54Z",
        "updated_at": "2024-02-05T10:32:59Z",
        "closed_at": null,
        "author_association": "CONTRIBUTOR",
        "active_lock_reason": null,
        "draft": false,
        "pull_request": {
            "url": "https://api.github.com/repos/Kotlin/kotlinx.coroutines/pulls/3987",
            "html_url": "https://github.com/Kotlin/kotlinx.coroutines/pull/3987",
            "diff_url": "https://github.com/Kotlin/kotlinx.coroutines/pull/3987.diff",
            "patch_url": "https://github.com/Kotlin/kotlinx.coroutines/pull/3987.patch",
            "merged_at": null
        },
        "body": "This PR contains the API that is aimed to solve the problem of debugger stepping inside one coroutine.\r\n\r\n**The initial task:** the debugger should be able to step inside one coroutine.\r\n\r\n**The problem**: for every step / breakpoint inside the coroutine we need to determine whether we are about to stop in the same coroutine as the one we were in during the previous step. To achieve this we require an attribute that could be checked at every step.\r\n\r\n**What may serve as this attribute**: \r\n- Continuation: at the first breakpoint, we save a continuation instance corresponding to the current frame. Before stopping at the next breakpoint inside this coroutine, we check whether the continuation instance at the frame matches the one we saved. If it does, we stop at the breakpoint. In case of stepping into another suspend function we go up the continuation stack, e.g.\r\n\r\n```kotlin\r\nsuspend fun foo() {\r\n  inst1 // the first breakpoint\r\n  bar()\r\n  inst2\r\n}\r\n\r\nsuspend fun bar() {\r\n  inst1 \r\n  baz()\r\n  inst3\r\n}\r\n\r\nsuspend fun baz() {\r\n  delay(1000) \r\n  inst4 // RunToCursor here\r\n}\r\n```\r\n\r\nAt the first breakpoint we save the `FooContinuation` instance, and to determine whether we should stop at `baz` we'll have to unroll the continuation stack up to the foo frame and compare the continuation instance with the saved one: `((bazContinuation.completion as BarContinuation).completion as FooContinuation)`\r\n\r\n- The solution from this PR - Thread local: use ThreadLocal to store the coroutine id on every `probeCoroutineSuspended` and `probeCoroutineResumed`. Store the id of the current coroutine in the breakpoint. When a breakpoint is reached, retrieve the coroutine id running on the current thread from the ThreadLocal and compare it with the saved id to determine if it's the same coroutine as the one at the previous step.\r\n\r\nThis solution allows to avoid unrolling the continuation stack in case of stepping into the body of another suspend function.\r\nAlso, it allows to step in the body of non-suspend function that was invoked from a suspend function, in this case there will be no continuation instance passed to the call.\r\n     \r\n**Issues with this solution:** \r\n- it's added as part of the old API that is being replaced, though it's ok to test the solution for now. In case it's used, then this API should become part of the stable API in the new `kotlinx.coroutines.debugging` package.\r\n- it may be very slow to evaluate the value of ThreadLocal for every debug step. A thousand coroutines may run simultaneously, though we have to stop at the coroutine we need.",
        "reactions": {
            "url": "https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/3987/reactions",
            "total_count": 2,
            "+1": 1,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 1,
            "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/3987/timeline",
        "performed_via_github_app": null,
        "state_reason": null
    },
    {
        "url": "https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/3983",
        "repository_url": "https://api.github.com/repos/Kotlin/kotlinx.coroutines",
        "labels_url": "https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/3983/labels{/name}",
        "comments_url": "https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/3983/comments",
        "events_url": "https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/3983/events",
        "html_url": "https://github.com/Kotlin/kotlinx.coroutines/issues/3983",
        "id": 2036433701,
        "node_id": "I_kwDOA63QcM55YYMl",
        "number": 3983,
        "title": "`runBlocking` should let go of CPU token before parking the thread",
        "user": {
            "login": "dovchinnikov",
            "id": 5519549,
            "node_id": "MDQ6VXNlcjU1MTk1NDk=",
            "avatar_url": "https://avatars.githubusercontent.com/u/5519549?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/dovchinnikov",
            "html_url": "https://github.com/dovchinnikov",
            "followers_url": "https://api.github.com/users/dovchinnikov/followers",
            "following_url": "https://api.github.com/users/dovchinnikov/following{/other_user}",
            "gists_url": "https://api.github.com/users/dovchinnikov/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/dovchinnikov/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/dovchinnikov/subscriptions",
            "organizations_url": "https://api.github.com/users/dovchinnikov/orgs",
            "repos_url": "https://api.github.com/users/dovchinnikov/repos",
            "events_url": "https://api.github.com/users/dovchinnikov/events{/privacy}",
            "received_events_url": "https://api.github.com/users/dovchinnikov/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 846419469,
                "node_id": "MDU6TGFiZWw4NDY0MTk0Njk=",
                "url": "https://api.github.com/repos/Kotlin/kotlinx.coroutines/labels/design",
                "name": "design",
                "color": "8a9edb",
                "default": false,
                "description": ""
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [

        ],
        "milestone": null,
        "comments": 16,
        "created_at": "2023-12-11T20:03:22Z",
        "updated_at": "2023-12-19T19:14:38Z",
        "closed_at": null,
        "author_association": "CONTRIBUTOR",
        "active_lock_reason": null,
        "body": "**What do we have now?**\r\n\r\n`runBlocking` parks the thread holding the CPU-token if it happens on a thread of `Dispatchers.Default`.\r\n\r\n**What should be instead?**\r\n\r\n`runBlocking` should let go of the CPU-token before parking, and \"re-acquire\" the token before un-parking (it should be un-parked in state where the token is already held by it).\r\n\r\n**Why?**\r\n\r\nThe current solution is just \"don't use `runBlocking`\" followed by \"at least don't use `runBlocking` inside `Dispatchers.Default`\", which is not a solution. This does not work in real-life scenarios, especially with large mixed codebases like IJ. In IJ we've tried to leverage #3439 but the approach is stillborn because it causes #3982 but on multi-threaded scale, and we even didn't start to tackle the thread locals which leak from outer thread into inner tasks.\r\n\r\nIn other similar scenarios (FJ's managed block), another thread is spawned to compensate for the blocked one. On JVM this is the most viable approach to this day. It's better to spawn an extra thread, which might do some other work later on or just die after timeout, and to risk OOME, than to have a starvation deadlock.\r\n",
        "reactions": {
            "url": "https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/3983/reactions",
            "total_count": 2,
            "+1": 2,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/3983/timeline",
        "performed_via_github_app": null,
        "state_reason": null
    },
    {
        "url": "https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/3982",
        "repository_url": "https://api.github.com/repos/Kotlin/kotlinx.coroutines",
        "labels_url": "https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/3982/labels{/name}",
        "comments_url": "https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/3982/comments",
        "events_url": "https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/3982/events",
        "html_url": "https://github.com/Kotlin/kotlinx.coroutines/issues/3982",
        "id": 2036410622,
        "node_id": "I_kwDOA63QcM55YSj-",
        "number": 3982,
        "title": "Nested `runBlocking` deadlocks when a task depends on the nested `runBlocking` itself",
        "user": {
            "login": "dovchinnikov",
            "id": 5519549,
            "node_id": "MDQ6VXNlcjU1MTk1NDk=",
            "avatar_url": "https://avatars.githubusercontent.com/u/5519549?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/dovchinnikov",
            "html_url": "https://github.com/dovchinnikov",
            "followers_url": "https://api.github.com/users/dovchinnikov/followers",
            "following_url": "https://api.github.com/users/dovchinnikov/following{/other_user}",
            "gists_url": "https://api.github.com/users/dovchinnikov/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/dovchinnikov/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/dovchinnikov/subscriptions",
            "organizations_url": "https://api.github.com/users/dovchinnikov/orgs",
            "repos_url": "https://api.github.com/users/dovchinnikov/repos",
            "events_url": "https://api.github.com/users/dovchinnikov/events{/privacy}",
            "received_events_url": "https://api.github.com/users/dovchinnikov/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 846419469,
                "node_id": "MDU6TGFiZWw4NDY0MTk0Njk=",
                "url": "https://api.github.com/repos/Kotlin/kotlinx.coroutines/labels/design",
                "name": "design",
                "color": "8a9edb",
                "default": false,
                "description": ""
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [

        ],
        "milestone": null,
        "comments": 4,
        "created_at": "2023-12-11T19:47:08Z",
        "updated_at": "2023-12-12T16:33:42Z",
        "closed_at": null,
        "author_association": "CONTRIBUTOR",
        "active_lock_reason": null,
        "body": "**What do we have now?**\r\n\r\nThe following deadlocks because nested `runBlocking` tries to process tasks from the outer `runBlocking`, and one of the tasks actually depends on the completion of the nested `runBlocking`:\r\n\r\n```\r\nimport kotlinx.coroutines.*\r\n\r\nclass Container(private val scope: CoroutineScope) {\r\n\r\n  private val instances = HashMap<Class<*>, Deferred<Any>>() // basically a map\r\n\r\n  suspend fun <T> instance(key: Class<out T>): T {\r\n    return instances\r\n      .computeIfAbsent(key, ::instanceDeferred)\r\n      .await() as T\r\n  }\r\n\r\n  private fun instanceDeferred(clazz: Class<*>): Deferred<Any> = scope.async {\r\n    val constructor = clazz.getConstructor(Container::class.java)\r\n    constructor.isAccessible = true\r\n    constructor.newInstance(this@Container)\r\n  }\r\n}\r\n\r\nclass MyService(container: Container) {\r\n  init {\r\n    runBlocking {\r\n      // this can ask container for an unrelated service,\r\n      // or in this case it's enough for it to be empty\r\n    }\r\n  }\r\n}\r\n\r\nclass MyService2(container: Container) {\r\n  val service1 = runBlocking {\r\n    container.instance(MyService::class.java)\r\n  }\r\n}\r\n\r\nfun main() {\r\n  runBlocking {\r\n    val container = Container(this@runBlocking)\r\n    launch {\r\n      println(container.instance(MyService::class.java))\r\n    }\r\n    launch {\r\n      println(container.instance(MyService2::class.java).service1)\r\n    }\r\n  }\r\n}\r\n```\r\n\r\n**What should be instead?**\r\n\r\n`runBlocking` should not steal tasks from outer `runBlocking`.\r\n\r\nAlternatively, please provide an API to make `runBlocking` not steal tasks. It may be a boolean, or a special coroutine context element. [Currently we have to use internals.](https://github.com/JetBrains/intellij-community/blob/05d5f7313a85021199e5c25c02615dcb2e0414b9/platform/service-container/src/com/intellij/serviceContainer/ComponentManagerImpl.kt#L2413C15-L2413C38)\r\n\r\n**Why?**\r\n\r\nBecause otherwise it deadlocks. \r\n\r\n**Notes**\r\n\r\nOriginally, the \"stealing\" was added to fix a very specific use-case #860. \r\n\r\nI believe that if nested `runBlocking` \"steals\" tasks while being inside a limited dispatcher, then this stealing logic should apply to all limited dispatchers, i.e. `runBlocking` on a thread inside `Dispatchers.Default` should steal tasks from `Dispatchers.Default` (#3439). If that's not possible for any reason, then nested `runBlocking` should not steal tasks from the outer `runBlocking` for the very same reason whatever it might be. ",
        "reactions": {
            "url": "https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/3982/reactions",
            "total_count": 1,
            "+1": 1,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/3982/timeline",
        "performed_via_github_app": null,
        "state_reason": null
    },
    {
        "url": "https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/3981",
        "repository_url": "https://api.github.com/repos/Kotlin/kotlinx.coroutines",
        "labels_url": "https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/3981/labels{/name}",
        "comments_url": "https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/3981/comments",
        "events_url": "https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/3981/events",
        "html_url": "https://github.com/Kotlin/kotlinx.coroutines/issues/3981",
        "id": 2035841447,
        "node_id": "I_kwDOA63QcM55WHmn",
        "number": 3981,
        "title": "kotlinx.coroutines.scheduling.CoroutineSchedulerOversubscriptionTest.testOverSubscriptionStress hanged",
        "user": {
            "login": "dkhalanskyjb",
            "id": 52952525,
            "node_id": "MDQ6VXNlcjUyOTUyNTI1",
            "avatar_url": "https://avatars.githubusercontent.com/u/52952525?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/dkhalanskyjb",
            "html_url": "https://github.com/dkhalanskyjb",
            "followers_url": "https://api.github.com/users/dkhalanskyjb/followers",
            "following_url": "https://api.github.com/users/dkhalanskyjb/following{/other_user}",
            "gists_url": "https://api.github.com/users/dkhalanskyjb/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/dkhalanskyjb/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/dkhalanskyjb/subscriptions",
            "organizations_url": "https://api.github.com/users/dkhalanskyjb/orgs",
            "repos_url": "https://api.github.com/users/dkhalanskyjb/repos",
            "events_url": "https://api.github.com/users/dkhalanskyjb/events{/privacy}",
            "received_events_url": "https://api.github.com/users/dkhalanskyjb/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 2869593679,
                "node_id": "MDU6TGFiZWwyODY5NTkzNjc5",
                "url": "https://api.github.com/repos/Kotlin/kotlinx.coroutines/labels/build",
                "name": "build",
                "color": "585A1E",
                "default": false,
                "description": ""
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": {
            "login": "qwwdfsad",
            "id": 2780116,
            "node_id": "MDQ6VXNlcjI3ODAxMTY=",
            "avatar_url": "https://avatars.githubusercontent.com/u/2780116?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/qwwdfsad",
            "html_url": "https://github.com/qwwdfsad",
            "followers_url": "https://api.github.com/users/qwwdfsad/followers",
            "following_url": "https://api.github.com/users/qwwdfsad/following{/other_user}",
            "gists_url": "https://api.github.com/users/qwwdfsad/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/qwwdfsad/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/qwwdfsad/subscriptions",
            "organizations_url": "https://api.github.com/users/qwwdfsad/orgs",
            "repos_url": "https://api.github.com/users/qwwdfsad/repos",
            "events_url": "https://api.github.com/users/qwwdfsad/events{/privacy}",
            "received_events_url": "https://api.github.com/users/qwwdfsad/received_events",
            "type": "User",
            "site_admin": false
        },
        "assignees": [
            {
                "login": "qwwdfsad",
                "id": 2780116,
                "node_id": "MDQ6VXNlcjI3ODAxMTY=",
                "avatar_url": "https://avatars.githubusercontent.com/u/2780116?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/qwwdfsad",
                "html_url": "https://github.com/qwwdfsad",
                "followers_url": "https://api.github.com/users/qwwdfsad/followers",
                "following_url": "https://api.github.com/users/qwwdfsad/following{/other_user}",
                "gists_url": "https://api.github.com/users/qwwdfsad/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/qwwdfsad/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/qwwdfsad/subscriptions",
                "organizations_url": "https://api.github.com/users/qwwdfsad/orgs",
                "repos_url": "https://api.github.com/users/qwwdfsad/repos",
                "events_url": "https://api.github.com/users/qwwdfsad/events{/privacy}",
                "received_events_url": "https://api.github.com/users/qwwdfsad/received_events",
                "type": "User",
                "site_admin": false
            }
        ],
        "milestone": null,
        "comments": 0,
        "created_at": "2023-12-11T14:45:02Z",
        "updated_at": "2023-12-11T14:45:13Z",
        "closed_at": null,
        "author_association": "COLLABORATOR",
        "active_lock_reason": null,
        "body": "https://teamcity.jetbrains.com/buildConfiguration/KotlinTools_KotlinxCoroutines_Build/4416699?hideProblemsFromDependencies=false&hideTestsFromDependencies=false&expandBuildChangesSection=true&logFilter=debug&logView=linear&showLog=4416699_23722__expandAll",
        "reactions": {
            "url": "https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/3981/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/3981/timeline",
        "performed_via_github_app": null,
        "state_reason": null
    },
    {
        "url": "https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/3978",
        "repository_url": "https://api.github.com/repos/Kotlin/kotlinx.coroutines",
        "labels_url": "https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/3978/labels{/name}",
        "comments_url": "https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/3978/comments",
        "events_url": "https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/3978/events",
        "html_url": "https://github.com/Kotlin/kotlinx.coroutines/issues/3978",
        "id": 2033011385,
        "node_id": "I_kwDOA63QcM55LUq5",
        "number": 3978,
        "title": "Public API to configure a default exception handler",
        "user": {
            "login": "swankjesse",
            "id": 133019,
            "node_id": "MDQ6VXNlcjEzMzAxOQ==",
            "avatar_url": "https://avatars.githubusercontent.com/u/133019?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/swankjesse",
            "html_url": "https://github.com/swankjesse",
            "followers_url": "https://api.github.com/users/swankjesse/followers",
            "following_url": "https://api.github.com/users/swankjesse/following{/other_user}",
            "gists_url": "https://api.github.com/users/swankjesse/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/swankjesse/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/swankjesse/subscriptions",
            "organizations_url": "https://api.github.com/users/swankjesse/orgs",
            "repos_url": "https://api.github.com/users/swankjesse/repos",
            "events_url": "https://api.github.com/users/swankjesse/events{/privacy}",
            "received_events_url": "https://api.github.com/users/swankjesse/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 396785979,
                "node_id": "MDU6TGFiZWwzOTY3ODU5Nzk=",
                "url": "https://api.github.com/repos/Kotlin/kotlinx.coroutines/labels/enhancement",
                "name": "enhancement",
                "color": "84b6eb",
                "default": true,
                "description": null
            },
            {
                "id": 1252651513,
                "node_id": "MDU6TGFiZWwxMjUyNjUxNTEz",
                "url": "https://api.github.com/repos/Kotlin/kotlinx.coroutines/labels/js",
                "name": "js",
                "color": "4c44e5",
                "default": false,
                "description": ""
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [

        ],
        "milestone": null,
        "comments": 1,
        "created_at": "2023-12-08T16:55:48Z",
        "updated_at": "2024-01-18T16:49:12Z",
        "closed_at": null,
        "author_association": "NONE",
        "active_lock_reason": null,
        "body": "**Use case**\r\n\r\nI’m using Kotlin/JS. I’d like a public API to install a platform exception handler. As-is my uncaught exceptions are going to console.log, where they’re invisible to my observability tools. The [ensurePlatformExceptionHandlerLoaded()](https://github.com/Kotlin/kotlinx.coroutines/blob/master/kotlinx-coroutines-core/jsAndWasmShared/src/internal/CoroutineExceptionHandlerImpl.kt#L15) function does what I want, but that function isn’t public!\r\n\r\nI have tried to get my `CoroutineExceptionHandler` into every `CoroutineContext` in my application, but I’ve found it very difficult to stay on top of all of these. Especially with first- and third-party libraries that do their own coroutines things!\r\n\r\n\r\n**The Shape of the API**\r\n\r\nThis multiplatform API addresses my request across all platforms.\r\n\r\n```kotlin\r\npackage kotlinx.coroutines\r\n\r\n/**\r\n * Invoked for uncaught exceptions thrown in CoroutineContexts that\r\n * don’t have a CoroutineExceptionHandler.\r\n * \r\n * If null, a platform-specific handler will be invoked instead.\r\n */\r\nval defaultCoroutineExceptionHandler: CoroutineExceptionHandler? = null\r\n```\r\n\r\n**Prior Art**\r\n\r\nJava has this:\r\n\r\n```java\r\nclass Thread {\r\n  public static void setDefaultUncaughtExceptionHandler(UncaughtExceptionHandler e)\r\n  public static UncaughtExceptionHandler getDefaultUncaughtExceptionHandler()\r\n}\r\n```\r\n\r\n",
        "reactions": {
            "url": "https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/3978/reactions",
            "total_count": 1,
            "+1": 1,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/3978/timeline",
        "performed_via_github_app": null,
        "state_reason": null
    },
    {
        "url": "https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/3977",
        "repository_url": "https://api.github.com/repos/Kotlin/kotlinx.coroutines",
        "labels_url": "https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/3977/labels{/name}",
        "comments_url": "https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/3977/comments",
        "events_url": "https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/3977/events",
        "html_url": "https://github.com/Kotlin/kotlinx.coroutines/pull/3977",
        "id": 2031797169,
        "node_id": "PR_kwDOA63QcM5hemwS",
        "number": 3977,
        "title": "Split package and coroutine debug agent API",
        "user": {
            "login": "mvicsokolova",
            "id": 82594708,
            "node_id": "MDQ6VXNlcjgyNTk0NzA4",
            "avatar_url": "https://avatars.githubusercontent.com/u/82594708?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/mvicsokolova",
            "html_url": "https://github.com/mvicsokolova",
            "followers_url": "https://api.github.com/users/mvicsokolova/followers",
            "following_url": "https://api.github.com/users/mvicsokolova/following{/other_user}",
            "gists_url": "https://api.github.com/users/mvicsokolova/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/mvicsokolova/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/mvicsokolova/subscriptions",
            "organizations_url": "https://api.github.com/users/mvicsokolova/orgs",
            "repos_url": "https://api.github.com/users/mvicsokolova/repos",
            "events_url": "https://api.github.com/users/mvicsokolova/events{/privacy}",
            "received_events_url": "https://api.github.com/users/mvicsokolova/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [

        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [

        ],
        "milestone": null,
        "comments": 0,
        "created_at": "2023-12-08T01:47:40Z",
        "updated_at": "2024-01-17T11:50:18Z",
        "closed_at": null,
        "author_association": "CONTRIBUTOR",
        "active_lock_reason": null,
        "draft": true,
        "pull_request": {
            "url": "https://api.github.com/repos/Kotlin/kotlinx.coroutines/pulls/3977",
            "html_url": "https://github.com/Kotlin/kotlinx.coroutines/pull/3977",
            "diff_url": "https://github.com/Kotlin/kotlinx.coroutines/pull/3977.diff",
            "patch_url": "https://github.com/Kotlin/kotlinx.coroutines/pull/3977.patch",
            "merged_at": null
        },
        "body": null,
        "reactions": {
            "url": "https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/3977/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/3977/timeline",
        "performed_via_github_app": null,
        "state_reason": null
    },
    {
        "url": "https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/3976",
        "repository_url": "https://api.github.com/repos/Kotlin/kotlinx.coroutines",
        "labels_url": "https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/3976/labels{/name}",
        "comments_url": "https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/3976/comments",
        "events_url": "https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/3976/events",
        "html_url": "https://github.com/Kotlin/kotlinx.coroutines/issues/3976",
        "id": 2031650841,
        "node_id": "I_kwDOA63QcM55GIgZ",
        "number": 3976,
        "title": "[K/JS] Continuation exception is unexpectedly propagated to the resuming coroutine",
        "user": {
            "login": "francescotescari",
            "id": 36578133,
            "node_id": "MDQ6VXNlcjM2NTc4MTMz",
            "avatar_url": "https://avatars.githubusercontent.com/u/36578133?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/francescotescari",
            "html_url": "https://github.com/francescotescari",
            "followers_url": "https://api.github.com/users/francescotescari/followers",
            "following_url": "https://api.github.com/users/francescotescari/following{/other_user}",
            "gists_url": "https://api.github.com/users/francescotescari/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/francescotescari/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/francescotescari/subscriptions",
            "organizations_url": "https://api.github.com/users/francescotescari/orgs",
            "repos_url": "https://api.github.com/users/francescotescari/repos",
            "events_url": "https://api.github.com/users/francescotescari/events{/privacy}",
            "received_events_url": "https://api.github.com/users/francescotescari/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 396785977,
                "node_id": "MDU6TGFiZWwzOTY3ODU5Nzc=",
                "url": "https://api.github.com/repos/Kotlin/kotlinx.coroutines/labels/bug",
                "name": "bug",
                "color": "ee0701",
                "default": true,
                "description": null
            },
            {
                "id": 1252651513,
                "node_id": "MDU6TGFiZWwxMjUyNjUxNTEz",
                "url": "https://api.github.com/repos/Kotlin/kotlinx.coroutines/labels/js",
                "name": "js",
                "color": "4c44e5",
                "default": false,
                "description": ""
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [

        ],
        "milestone": null,
        "comments": 0,
        "created_at": "2023-12-07T22:52:11Z",
        "updated_at": "2023-12-08T09:45:33Z",
        "closed_at": null,
        "author_association": "CONTRIBUTOR",
        "active_lock_reason": null,
        "body": "**Describe the bug**\r\n\r\nIn Kotlin/JS, when resuming the main coroutine exceptionally, the exception is thrown is the resuming coroutine (even if it's in a different scope) and it's not propagated in the main coroutine scope. \r\nThis happens with Kotlin/JS. Coroutines version 1.7.3. Kotlin version 1.9.21.\r\n\r\n**Provide a Reproducer**\r\n\r\nCreate a basic Kotlin/JS project with the following main file:\r\n\r\n```kotlin\r\nimport kotlinx.coroutines.*\r\nimport kotlin.coroutines.Continuation\r\nimport kotlin.coroutines.EmptyCoroutineContext\r\nimport kotlin.coroutines.resumeWithException\r\n\r\nval mainContinuation = CompletableDeferred<Continuation<Unit>>()\r\nval scope = CoroutineScope(EmptyCoroutineContext)\r\n\r\nsuspend fun main() {\r\n\r\n    // Wait for the main coroutine to suspend and resume it exceptionally\r\n    scope.launch {\r\n        val continuation = mainContinuation.await()\r\n        val exception = Exception(\"Test exception\")\r\n        try {\r\n            continuation.resumeWithException(exception)\r\n        } catch (unexpected: Throwable) {\r\n            // This should get printed\r\n            println(\"Unexpected exception: $unexpected\")\r\n        }\r\n    }\r\n\r\n    // Suspend the main coroutine \r\n    suspendCancellableCoroutine {\r\n        mainContinuation.complete(it)\r\n    }\r\n\r\n}\r\n```\r\n\r\nWhat I expect: the main coroutine is resumed exceptionally and the exception ends up in the global uncaught handler, the resuming coroutine is not affected, as it is in a different scope.\r\n\r\nWhat happens instead: the main coroutine is resumed exceptionally, but then the exception is propagated to the resumer coroutine and caught in the catch block, printing `Unexpected exception: Exception: Test exception`. The global uncaught exception handlers is not invoked, as the exception doesn't appear in the console as it normally does otherwise.\r\n\r\nMore details:\r\nCatching the exception in the main coroutine prevents it from being propagated to the resumer. \r\nWrapping the main suspending point in \r\n```kotlin\r\n    // Suspend the main coroutine\r\n    try {\r\n        suspendCancellableCoroutine {\r\n            mainContinuation.complete(it)\r\n        }\r\n    } finally {\r\n        delay(1)\r\n    }\r\n```\r\n\"fixes it\" as the exception is no more propagated to the resumer and ends up in the uncaught handler.\r\n\r\n\r\nIf I understand coroutines, this is not the expected behavior, and it doesn't happen on JVM for example 🤔 \r\n",
        "reactions": {
            "url": "https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/3976/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/3976/timeline",
        "performed_via_github_app": null,
        "state_reason": null
    },
    {
        "url": "https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/3952",
        "repository_url": "https://api.github.com/repos/Kotlin/kotlinx.coroutines",
        "labels_url": "https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/3952/labels{/name}",
        "comments_url": "https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/3952/comments",
        "events_url": "https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/3952/events",
        "html_url": "https://github.com/Kotlin/kotlinx.coroutines/issues/3952",
        "id": 2007165491,
        "node_id": "I_kwDOA63QcM53ouoz",
        "number": 3952,
        "title": "SendChannel.trySendBlocking() hangs thread upon unbuffered callbackFlow channel close",
        "user": {
            "login": "bubenheimer",
            "id": 688759,
            "node_id": "MDQ6VXNlcjY4ODc1OQ==",
            "avatar_url": "https://avatars.githubusercontent.com/u/688759?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/bubenheimer",
            "html_url": "https://github.com/bubenheimer",
            "followers_url": "https://api.github.com/users/bubenheimer/followers",
            "following_url": "https://api.github.com/users/bubenheimer/following{/other_user}",
            "gists_url": "https://api.github.com/users/bubenheimer/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/bubenheimer/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/bubenheimer/subscriptions",
            "organizations_url": "https://api.github.com/users/bubenheimer/orgs",
            "repos_url": "https://api.github.com/users/bubenheimer/repos",
            "events_url": "https://api.github.com/users/bubenheimer/events{/privacy}",
            "received_events_url": "https://api.github.com/users/bubenheimer/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 396785982,
                "node_id": "MDU6TGFiZWwzOTY3ODU5ODI=",
                "url": "https://api.github.com/repos/Kotlin/kotlinx.coroutines/labels/question",
                "name": "question",
                "color": "cc317c",
                "default": true,
                "description": null
            },
            {
                "id": 1384045755,
                "node_id": "MDU6TGFiZWwxMzg0MDQ1NzU1",
                "url": "https://api.github.com/repos/Kotlin/kotlinx.coroutines/labels/channels",
                "name": "channels",
                "color": "f4e792",
                "default": false,
                "description": ""
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": {
            "login": "qwwdfsad",
            "id": 2780116,
            "node_id": "MDQ6VXNlcjI3ODAxMTY=",
            "avatar_url": "https://avatars.githubusercontent.com/u/2780116?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/qwwdfsad",
            "html_url": "https://github.com/qwwdfsad",
            "followers_url": "https://api.github.com/users/qwwdfsad/followers",
            "following_url": "https://api.github.com/users/qwwdfsad/following{/other_user}",
            "gists_url": "https://api.github.com/users/qwwdfsad/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/qwwdfsad/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/qwwdfsad/subscriptions",
            "organizations_url": "https://api.github.com/users/qwwdfsad/orgs",
            "repos_url": "https://api.github.com/users/qwwdfsad/repos",
            "events_url": "https://api.github.com/users/qwwdfsad/events{/privacy}",
            "received_events_url": "https://api.github.com/users/qwwdfsad/received_events",
            "type": "User",
            "site_admin": false
        },
        "assignees": [
            {
                "login": "qwwdfsad",
                "id": 2780116,
                "node_id": "MDQ6VXNlcjI3ODAxMTY=",
                "avatar_url": "https://avatars.githubusercontent.com/u/2780116?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/qwwdfsad",
                "html_url": "https://github.com/qwwdfsad",
                "followers_url": "https://api.github.com/users/qwwdfsad/followers",
                "following_url": "https://api.github.com/users/qwwdfsad/following{/other_user}",
                "gists_url": "https://api.github.com/users/qwwdfsad/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/qwwdfsad/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/qwwdfsad/subscriptions",
                "organizations_url": "https://api.github.com/users/qwwdfsad/orgs",
                "repos_url": "https://api.github.com/users/qwwdfsad/repos",
                "events_url": "https://api.github.com/users/qwwdfsad/events{/privacy}",
                "received_events_url": "https://api.github.com/users/qwwdfsad/received_events",
                "type": "User",
                "site_admin": false
            }
        ],
        "milestone": null,
        "comments": 7,
        "created_at": "2023-11-22T21:54:36Z",
        "updated_at": "2024-01-19T17:34:22Z",
        "closed_at": null,
        "author_association": "NONE",
        "active_lock_reason": null,
        "body": "**Describe the bug**\r\n\r\n`SendChannel.trySendBlocking()` hangs the calling thread indefinitely when an unbuffered callbackFlow channel closes. Instead I expect `trySendBlocking()` to fail with an appropriate channel-related exception in a timely fashion once the channel closes.\r\n\r\nCoroutines version 1.7.3\r\n\r\n**Provide a Reproducer**\r\n\r\n```\r\nimport kotlinx.coroutines.GlobalScope\r\nimport kotlinx.coroutines.channels.Channel.Factory.RENDEZVOUS\r\nimport kotlinx.coroutines.channels.awaitClose\r\nimport kotlinx.coroutines.channels.trySendBlocking\r\nimport kotlinx.coroutines.delay\r\nimport kotlinx.coroutines.flow.buffer\r\nimport kotlinx.coroutines.flow.callbackFlow\r\nimport kotlinx.coroutines.flow.onCompletion\r\nimport kotlinx.coroutines.flow.transform\r\nimport kotlinx.coroutines.launch\r\nimport kotlinx.coroutines.runBlocking\r\n\r\nvar callback: ((Int) -> Unit)? = null\r\n\r\nval thread = Thread {\r\n    repeat(Int.MAX_VALUE) {\r\n        println(\"Calling $it\")\r\n        callback!!(it)\r\n    }\r\n}\r\n\r\nval flow = callbackFlow {\r\n    callback = {\r\n        println(\"Sending $it\")\r\n        try {\r\n            trySendBlocking(it).exceptionOrNull()?.let { println(it) }\r\n        } catch (t: Throwable) {\r\n            println(\"Send fail: $t\")\r\n            throw t\r\n        }\r\n        println(\"Sent\")\r\n    }\r\n\r\n    thread.start()\r\n\r\n    awaitClose {\r\n        GlobalScope.launch {\r\n            repeat(5) {\r\n                println(\"channel.isClosedForSend: ${channel.isClosedForSend}\")\r\n                delay(1_000L)\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nrunBlocking {\r\n    val job = launch {\r\n        flow\r\n                .buffer(RENDEZVOUS)\r\n                .transform {\r\n                    emit(it)\r\n                    delay(1_000L)\r\n                }\r\n                .onCompletion { println(\"Flow collection complete: $it\") }\r\n                .collect {\r\n                    println(\"Received $it\")\r\n                }\r\n    }\r\n\r\n    println(\"Delaying\")\r\n    delay(5_000L)\r\n    println(\"Cancelling\")\r\n    job.cancel()\r\n    println(\"Delaying\")\r\n    delay(10_000L)\r\n    println(\"Interrupting\")\r\n    thread.interrupt()\r\n    println(\"Delaying\")\r\n    delay(10_000L)\r\n    println(\"Done\")\r\n}\r\n```\r\n\r\nOutput below:\r\n\r\n```\r\nDelaying\r\nCalling 0\r\nSending 0\r\nSent\r\nCalling 1\r\nSending 1\r\nReceived 0\r\nReceived 1\r\nSent\r\nCalling 2\r\nSending 2\r\nReceived 2\r\nSent\r\nCalling 3\r\nSending 3\r\nReceived 3\r\nSent\r\nCalling 4\r\nSending 4\r\nReceived 4\r\nSent\r\nCalling 5\r\nSending 5\r\nCancelling\r\nDelaying\r\nchannel.isClosedForSend: false\r\nFlow collection complete: kotlinx.coroutines.JobCancellationException: StandaloneCoroutine was cancelled; job=StandaloneCoroutine{Cancelling}@77b987f3\r\nchannel.isClosedForSend: true\r\nchannel.isClosedForSend: true\r\nchannel.isClosedForSend: true\r\nchannel.isClosedForSend: true\r\nInterrupting\r\nDelaying\r\nSend fail: java.lang.InterruptedException\r\nDone\r\n```\r\n\r\nThe output shows that the callback thread hangs after the channel closes until it is forcibly interrupted from another thread.",
        "reactions": {
            "url": "https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/3952/reactions",
            "total_count": 1,
            "+1": 0,
            "-1": 0,
            "laugh": 1,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/3952/timeline",
        "performed_via_github_app": null,
        "state_reason": "reopened"
    },
    {
        "url": "https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/3950",
        "repository_url": "https://api.github.com/repos/Kotlin/kotlinx.coroutines",
        "labels_url": "https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/3950/labels{/name}",
        "comments_url": "https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/3950/comments",
        "events_url": "https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/3950/events",
        "html_url": "https://github.com/Kotlin/kotlinx.coroutines/issues/3950",
        "id": 2007041350,
        "node_id": "I_kwDOA63QcM53oQVG",
        "number": 3950,
        "title": "Atomics used in coroutines are ~2x slower on write than AtomicReference on Android",
        "user": {
            "login": "ShikaSD",
            "id": 6198744,
            "node_id": "MDQ6VXNlcjYxOTg3NDQ=",
            "avatar_url": "https://avatars.githubusercontent.com/u/6198744?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/ShikaSD",
            "html_url": "https://github.com/ShikaSD",
            "followers_url": "https://api.github.com/users/ShikaSD/followers",
            "following_url": "https://api.github.com/users/ShikaSD/following{/other_user}",
            "gists_url": "https://api.github.com/users/ShikaSD/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/ShikaSD/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/ShikaSD/subscriptions",
            "organizations_url": "https://api.github.com/users/ShikaSD/orgs",
            "repos_url": "https://api.github.com/users/ShikaSD/repos",
            "events_url": "https://api.github.com/users/ShikaSD/events{/privacy}",
            "received_events_url": "https://api.github.com/users/ShikaSD/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 800420394,
                "node_id": "MDU6TGFiZWw4MDA0MjAzOTQ=",
                "url": "https://api.github.com/repos/Kotlin/kotlinx.coroutines/labels/performance",
                "name": "performance",
                "color": "41bc38",
                "default": false,
                "description": null
            },
            {
                "id": 1411045241,
                "node_id": "MDU6TGFiZWwxNDExMDQ1MjQx",
                "url": "https://api.github.com/repos/Kotlin/kotlinx.coroutines/labels/android",
                "name": "android",
                "color": "e99695",
                "default": false,
                "description": ""
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [

        ],
        "milestone": null,
        "comments": 9,
        "created_at": "2023-11-22T20:05:15Z",
        "updated_at": "2024-01-18T19:09:13Z",
        "closed_at": null,
        "author_association": "NONE",
        "active_lock_reason": null,
        "body": "The coroutines are using atomic reference implementation backed by `Atomic*FieldUpdater` which is 2x slower for `compareAndSet` and `set` when compared to `AtomicReference` on Android devices.\r\n\r\nRunning the [benchmark](https://github.com/ShikaSD/benchmark-playground/blob/main/benchmark/src/androidTest/java/com/example/compose/benchmark/AtomicReferenceBenchmark.kt) on Pixel 4a I see the following results:\r\n\r\n```\r\n 29.0 ns  atomicReference_getAndSwap\r\n 71.3 ns  atomicRef_getAndSwap\r\n 50.7 ns  atomicReference_compareAndSet\r\n135   ns  atomicRef_compareAndSet\r\n  4.3 ns  atomicReference_get\r\n  4.2 ns  atomicRef_get\r\n 18.0 ns  atomicReference_lazySet\r\n 79.4 ns  atomicRef_lazySet\r\n```\r\n\r\nIn the benchmark above, `AtomicReference` is 2x to 4x faster on write than `atomicfu`. Looking at method traces from Compose benchmarks, I see that certain `Job` and `CoroutineContext` operations run multiple atomic operations depending on `Job` graph complexity.\r\n\r\nYou can see the trace from one of the abovementioned benchmarks [here](https://ui.perfetto.dev/#!/?s=9114767b39f92fb3dac2bd4162ada6c237157f3128d419c590b2a577b101c5c2) (it should be focused on coroutine work). It does not represent exact timing due to overhead of tracing every method, but does represent the amount of work being done. Most of it is dominated by `Atomic*FieldUpdater` operations and class instance checks that `Atomic*FieldUpdater` does.\r\n\r\nAs an experiment, I forked `atomicfu` to be backed by `AtomicReference` and got ~5% improvement in the same Compose benchmark, which is pretty significant given amount work Compose executes outside of coroutine context.\r\n\r\nI filed a separate issue for Android internally to potentially fix this on the runtime side, but any fix will affect only relatively small subset of modern devices that support runtime updates.",
        "reactions": {
            "url": "https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/3950/reactions",
            "total_count": 1,
            "+1": 1,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/3950/timeline",
        "performed_via_github_app": null,
        "state_reason": null
    },
    {
        "url": "https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/3941",
        "repository_url": "https://api.github.com/repos/Kotlin/kotlinx.coroutines",
        "labels_url": "https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/3941/labels{/name}",
        "comments_url": "https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/3941/comments",
        "events_url": "https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/3941/events",
        "html_url": "https://github.com/Kotlin/kotlinx.coroutines/pull/3941",
        "id": 1996525942,
        "node_id": "PR_kwDOA63QcM5fnKOo",
        "number": 3941,
        "title": "Fix typo in coroutine-context-and-dispatchers.md",
        "user": {
            "login": "izeye",
            "id": 1059363,
            "node_id": "MDQ6VXNlcjEwNTkzNjM=",
            "avatar_url": "https://avatars.githubusercontent.com/u/1059363?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/izeye",
            "html_url": "https://github.com/izeye",
            "followers_url": "https://api.github.com/users/izeye/followers",
            "following_url": "https://api.github.com/users/izeye/following{/other_user}",
            "gists_url": "https://api.github.com/users/izeye/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/izeye/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/izeye/subscriptions",
            "organizations_url": "https://api.github.com/users/izeye/orgs",
            "repos_url": "https://api.github.com/users/izeye/repos",
            "events_url": "https://api.github.com/users/izeye/events{/privacy}",
            "received_events_url": "https://api.github.com/users/izeye/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [

        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [

        ],
        "milestone": null,
        "comments": 0,
        "created_at": "2023-11-16T10:19:19Z",
        "updated_at": "2023-11-16T10:19:19Z",
        "closed_at": null,
        "author_association": "CONTRIBUTOR",
        "active_lock_reason": null,
        "draft": false,
        "pull_request": {
            "url": "https://api.github.com/repos/Kotlin/kotlinx.coroutines/pulls/3941",
            "html_url": "https://github.com/Kotlin/kotlinx.coroutines/pull/3941",
            "diff_url": "https://github.com/Kotlin/kotlinx.coroutines/pull/3941.diff",
            "patch_url": "https://github.com/Kotlin/kotlinx.coroutines/pull/3941.patch",
            "merged_at": null
        },
        "body": "This PR fixes a typo in the `coroutine-context-and-dispatchers.md`.",
        "reactions": {
            "url": "https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/3941/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/3941/timeline",
        "performed_via_github_app": null,
        "state_reason": null
    },
    {
        "url": "https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/3939",
        "repository_url": "https://api.github.com/repos/Kotlin/kotlinx.coroutines",
        "labels_url": "https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/3939/labels{/name}",
        "comments_url": "https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/3939/comments",
        "events_url": "https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/3939/events",
        "html_url": "https://github.com/Kotlin/kotlinx.coroutines/issues/3939",
        "id": 1990781042,
        "node_id": "I_kwDOA63QcM52qOhy",
        "number": 3939,
        "title": "Testing all emissions in StateFlow without losing any",
        "user": {
            "login": "dkhalanskyjb",
            "id": 52952525,
            "node_id": "MDQ6VXNlcjUyOTUyNTI1",
            "avatar_url": "https://avatars.githubusercontent.com/u/52952525?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/dkhalanskyjb",
            "html_url": "https://github.com/dkhalanskyjb",
            "followers_url": "https://api.github.com/users/dkhalanskyjb/followers",
            "following_url": "https://api.github.com/users/dkhalanskyjb/following{/other_user}",
            "gists_url": "https://api.github.com/users/dkhalanskyjb/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/dkhalanskyjb/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/dkhalanskyjb/subscriptions",
            "organizations_url": "https://api.github.com/users/dkhalanskyjb/orgs",
            "repos_url": "https://api.github.com/users/dkhalanskyjb/repos",
            "events_url": "https://api.github.com/users/dkhalanskyjb/events{/privacy}",
            "received_events_url": "https://api.github.com/users/dkhalanskyjb/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 742220755,
                "node_id": "MDU6TGFiZWw3NDIyMjA3NTU=",
                "url": "https://api.github.com/repos/Kotlin/kotlinx.coroutines/labels/docs",
                "name": "docs",
                "color": "6b87ce",
                "default": false,
                "description": ""
            },
            {
                "id": 1435915404,
                "node_id": "MDU6TGFiZWwxNDM1OTE1NDA0",
                "url": "https://api.github.com/repos/Kotlin/kotlinx.coroutines/labels/test",
                "name": "test",
                "color": "c94240",
                "default": false,
                "description": ""
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [

        ],
        "milestone": null,
        "comments": 3,
        "created_at": "2023-11-13T14:31:49Z",
        "updated_at": "2023-11-14T10:38:33Z",
        "closed_at": null,
        "author_association": "COLLABORATOR",
        "active_lock_reason": null,
        "body": "### Problem statement\r\n\r\nA **very** common pain point when using our testing framework is that `StateFlow` conflates values emitted in quick succession.\r\n\r\nExample (all examples are written without Turbine, DI frameworks, or other niceties to show the most universal form that doesn't rely on any technologies but the ones available in our library):\r\n\r\n```kotlin\r\nfun testStateFlow() = runTest {\r\n    val flow = MutableStateFlow(0)\r\n    // try to observe values [0; 10] in `flow`\r\n    var i = 0\r\n    val collector = launch {\r\n        flow.collect {\r\n            check(i == it) { \"Expected $i but got $it\" }\r\n            ++i\r\n            if (i == 10) this@launch.cancel()\r\n        }\r\n    }\r\n    // send values [1; 10] to `flow`\r\n    repeat(10) {\r\n        flow.value = it + 1\r\n    }\r\n    // wait for the collector to check the values that were sent\r\n    collector.join()\r\n}\r\n```\r\n\r\nThis test will fail with `Expected 0 but got 10`.\r\n\r\nThe reason is that there is no buffer inside `StateFlow` that stores the values that were emitted. Instead, only the latest value gets stored. `runTest` uses only a single thread, so while `repeat(10)` is running, the collector is waiting for its turn before it can start collecting values. The first moment when it gets its turn is `collector.join()`. Only then does the collector finally have a chance to check which values were sent—but at that point, `StateFlow` contains `10`.\r\n\r\nThis issue was reported to us many times: #3120, #3367, #3339, #3519, #3143, https://slack-chats.kotlinlang.org/t/16039814/hey-all-wave-i-have-been-trying-to-test-the-intermediate-sta#9c1503b6-6da5-4e21-9aef-8b03c0dc1dbc, https://slack-chats.kotlinlang.org/t/16056041/is-there-any-interest-in-calling-out-that-stateflow-instance#2878e145-9e65-4095-9112-1da730105076, https://www.billjings.com/posts/title/testing-stateflow-is-annoying/?up= ...\r\n\r\n### Affected code\r\n\r\nThe typical use case we get approached with is similar to the following.\r\n\r\nSystem under test is:\r\n```kotlin\r\ninterface NetworkCaller {\r\n  suspend fun getPage(uri: String): String\r\n}\r\n\r\nclass AboutPageContents(\r\n  private val scope: CoroutineScope,\r\n  private val networkCaller: NetworkCaller,\r\n) {\r\n  val _stateFlow = MutableStateFlow<State>(State.EMPTY)\r\n  val state = _stateFlow as StateFlow<State>\r\n\r\n  fun startLoading() = scope.launch {\r\n    _stateFlow.value = State.LOADING\r\n    val contents = networkCaller.getPage(\"https://neocities.org/about\")\r\n    _stateFlow.value = State.HAS_CONTENTS(contents)\r\n  }\r\n\r\n  sealed interface State {\r\n    object EMPTY: State;\r\n    object LOADING: State;\r\n    data class HAS_CONTENTS(val contents: String): State\r\n  }\r\n}\r\n```\r\n\r\nThe test:\r\n\r\n```kotlin\r\n@Test\r\nfun testAboutPageContentsLoading() = runTest {\r\n    val fakeNetworkCaller = object: NetworkCaller {\r\n        override suspend fun getPage(uri: String): String = \"<html></html>\"\r\n    }\r\n    val pageContents = AboutPageContents(this, fakeNetworkCaller)\r\n    val collector = launch {\r\n        var expectedState: AboutPageContents.State = AboutPageContents.State.EMPTY\r\n        pageContents.state.collect {\r\n            when (val currentState = expectedState) {\r\n                AboutPageContents.State.EMPTY -> {\r\n                    check(it === AboutPageContents.State.EMPTY) { \"Expected EMPTY, got $it\" }\r\n                    expectedState = AboutPageContents.State.LOADING\r\n                }\r\n                AboutPageContents.State.LOADING -> {\r\n                    check(it === AboutPageContents.State.LOADING) { \"Expected LOADING, got $it\" }\r\n                    expectedState = AboutPageContents.State.HAS_CONTENTS(\"<html></html>\")\r\n                }\r\n                is AboutPageContents.State.HAS_CONTENTS -> {\r\n                    check(it is AboutPageContents.State.HAS_CONTENTS) { \"Expected HAS_CONTENTS, got $it\" }\r\n                    check(it.contents == currentState.contents)\r\n                    this@launch.cancel()\r\n                }\r\n            }\r\n        }\r\n    }\r\n    pageContents.startLoading()\r\n    collector.join()\r\n}\r\n```\r\n\r\nThe test tries to observe every step of the process of loading a web page: initially, it's empty; after calling `startLoading`, it's supposed to enter the `LOADING` state, and finally, after the page has loaded, we get `HAS_CONTENTS`. However, this test fails with `Expected LOADING, got HAS_CONTENTS(contents=<html></html>)`: due to conflation, `startLoading` went from `LOADING` to `HAS_CONTENTS` before `collect` had a chance to process the `LOADING` state.\r\n\r\n### Fix\r\n\r\nThe problem with the above code is here:\r\n\r\n```kotlin\r\n    val fakeNetworkCaller = object: NetworkCaller {\r\n        override suspend fun getPage(uri: String): String = \"<html></html>\"\r\n    }\r\n```\r\n\r\nThis should be replaced with\r\n\r\n```kotlin\r\n    val fakeNetworkCaller = object: NetworkCaller {\r\n        override suspend fun getPage(uri: String): String {\r\n            delay(10.milliseconds)\r\n            return \"<html></html>\"\r\n        }\r\n    }\r\n```\r\n\r\nThe reasoning is as follows:\r\n\r\n* The test will test exactly what you tell it to test. If the fake network call doesn't have a `delay` in its implementation, it's happening instantly. If it really happened instantly in real life, the user wouldn't be able to see the spinner or any other visual indication of the `LOADING` state: the state would get conflated, and we'd observe going from `EMPTY` to `HAS_CONTENTS` immediately, which is exactly what the test correctly shows. By inserting `delay`, we clarify that we want to emulate the case when the network call took a noticeably long time.\r\n* In fact, it may be worth testing the behavior of the system in both scenarios: how will it react if the network call is slow (and the spinner is visible), and how will it react if the network call is surprisingly fast (and the UI only sees the `EMPTY` and `HAS_CONTENTS` emissions in production).\r\n* If `delay(25.milliseconds)` executes on a test dispatcher and not on actual `Dispatchers.IO`, it will be instantaneous. So, this `delay` call has no impact on the performance of the tests.\r\n\r\n### Alternative fixes (not recommended)\r\n\r\nThese are the alternative ways to work around this issue, with explanations of why we don't recommend any of them. Some of these fixes we explicitly recommended before, but now that our understanding of the use case has deepened, we can confidently advise against them.\r\n\r\n#### `UnconfinedTestDispatchers`\r\n\r\nWe can work around the issue if we replace the line\r\n\r\n```kotlin\r\n    val collector = launch {\r\n```\r\n\r\nwith\r\n\r\n```kotlin\r\n    val collector = launch(UnconfinedTestDispatcher(testScheduler)) {\r\n```\r\n\r\nBeing a test-framework-specific equivalent to `Dispatchers.Unconfined`, `UnconfinedTestDispatcher` this will ensure that each time an action to be executed on that dispatcher is enqueued (like a new value being available on the flow that's being collected), that action happens immediately.\r\n\r\nThis approach works. However, it's unintuitive and requires a deep dive into coroutines to understand it, but also a bit brittle: if assignments to the `StateFlow` also happen from an unconfined dispatcher, this behavior will *not* be guaranteed. This is a realistic concern:\r\n* Many tests are written like `runTest(UnconfinedTestDispatcher())` to ensure all `launch` calls are entered immediately.\r\n* The Android-specific `ViewModelScope` uses `Dispatchers.Main.immediate`, which behaves like `Dispatchers.Unconfined` when used from the main thread. So, any test for a `ViewModelScope` is susceptible to this.\r\n\r\nSee also https://github.com/Kotlin/kotlinx.coroutines/issues/3760\r\n\r\n#### A custom `CoroutineDispatcher`\r\n\r\nOne can tweak the `UnconfinedTestDispatcher` approach by defining their own coroutine dispatcher to deal with this case robustly:\r\n\r\n```kotlin\r\nobject DirectCoroutineDispatcher: CoroutineDispatcher() {\r\n    override fun dispatch(context: CoroutineContext, block: Runnable) { block.run() }\r\n}\r\n```\r\n\r\nThen,\r\n\r\n```kotlin\r\n    val collector = launch(DirectCoroutineDispatcher) {\r\n```\r\n\r\nwill ensure the collection is happening immediately, even if `runTest` as a whole runs in `UnconfinedTestDispatcher`.\r\n\r\nThis is clearly unreadable to anyone not well-versed in coroutines, and it's giving up the delay-skipping behavior: if `collector` used a `delay` inside, it would be performed with the real-time clock, making the test take longer. In addition, and most importantly, none of the dispatchers in real life behave like this, so any test written with `DirectCoroutineDispatcher` is at risk of testing the behavior that can't actually happen in production, and what even is the point of testing the behavior you can never observe?\r\n\r\n#### `yield()`\r\n\r\nA common approach is to add a `yield()` after each assignment to make sure the test thread gets the chance to process it. In general, `yield` should not be used to ensure a specific execution order, as it will only allow the code to run until the next suspension, and the number of suspensions a function will go through during its execution is an implementation detail that may change. If one goes down the `yield()` path, they may end up with strange constructions like `yield(); yield(); yield() // ensure everyone processed the change`, which demonstrates the intent much worse than `delay(25.milliseconds) // emulate a long network call` does.\r\n\r\nSemantically, `yield` is supposed to mean, \"let this thread do some other work,\" without defining exactly which work and how much of it is being done. The behavior of `yield` *is* predictable, but tracing through the interleavings of coroutines manually is too much work when reading a simple test.\r\n\r\n#### `runCurrent()` (/`advanceUntilIdle()`)\r\n\r\nInstead of `yield`, one can use `runCurrent()`. It's slightly better, as it doesn't rely on an exact number of context switches to perform: depending on your needs, it can work as `yield()`, or `yield(); yield(); yield()`: all the work that's scheduled to execute at the current moment will finish by the end of the call.\r\n\r\nThere are also downsides to `runCurrent()`. Notably, for this use case, it's a blocking call that can't be cancelled. See https://github.com/Kotlin/kotlinx.coroutines/issues/3919 for more details and a discussion.\r\n\r\n### What should we do?\r\n\r\nWe should update the documentation with a clear explanation of what to do in this typical scenario. For now, we'll keep this issue open for some time to collect feedback on the proposed approach.",
        "reactions": {
            "url": "https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/3939/reactions",
            "total_count": 8,
            "+1": 6,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 2,
            "rocket": 0,
            "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/3939/timeline",
        "performed_via_github_app": null,
        "state_reason": null
    },
    {
        "url": "https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/3938",
        "repository_url": "https://api.github.com/repos/Kotlin/kotlinx.coroutines",
        "labels_url": "https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/3938/labels{/name}",
        "comments_url": "https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/3938/comments",
        "events_url": "https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/3938/events",
        "html_url": "https://github.com/Kotlin/kotlinx.coroutines/issues/3938",
        "id": 1989323622,
        "node_id": "I_kwDOA63QcM52kqtm",
        "number": 3938,
        "title": "@FlowPreview on `DEFAULT_CONCURRENCY`",
        "user": {
            "login": "hoc081098",
            "id": 36917223,
            "node_id": "MDQ6VXNlcjM2OTE3MjIz",
            "avatar_url": "https://avatars.githubusercontent.com/u/36917223?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/hoc081098",
            "html_url": "https://github.com/hoc081098",
            "followers_url": "https://api.github.com/users/hoc081098/followers",
            "following_url": "https://api.github.com/users/hoc081098/following{/other_user}",
            "gists_url": "https://api.github.com/users/hoc081098/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/hoc081098/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/hoc081098/subscriptions",
            "organizations_url": "https://api.github.com/users/hoc081098/orgs",
            "repos_url": "https://api.github.com/users/hoc081098/repos",
            "events_url": "https://api.github.com/users/hoc081098/events{/privacy}",
            "received_events_url": "https://api.github.com/users/hoc081098/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 396785979,
                "node_id": "MDU6TGFiZWwzOTY3ODU5Nzk=",
                "url": "https://api.github.com/repos/Kotlin/kotlinx.coroutines/labels/enhancement",
                "name": "enhancement",
                "color": "84b6eb",
                "default": true,
                "description": null
            },
            {
                "id": 1312872054,
                "node_id": "MDU6TGFiZWwxMzEyODcyMDU0",
                "url": "https://api.github.com/repos/Kotlin/kotlinx.coroutines/labels/flow",
                "name": "flow",
                "color": "8917ed",
                "default": false,
                "description": ""
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [

        ],
        "milestone": null,
        "comments": 1,
        "created_at": "2023-11-12T09:32:31Z",
        "updated_at": "2024-02-12T10:52:47Z",
        "closed_at": null,
        "author_association": "NONE",
        "active_lock_reason": null,
        "body": "Hello maintainers,\r\n\r\nI see `DEFAULT_CONCURRENCY` marked with `DEFAULT_CONCURRENCY`,\r\nbut `Flow<Flow<T>>.flattenMerge(concurrency: Int = DEFAULT_CONCURRENCY)` is not marked with `FlowPreview`.\r\n\r\nIs there any reason to keep `@FlowPreview` on `DEFAULT_CONCURRENCY`?\r\nCan we remove `@FlowPreview` on `DEFAULT_CONCURRENCY`?\r\n\r\nThanks🙏",
        "reactions": {
            "url": "https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/3938/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/3938/timeline",
        "performed_via_github_app": null,
        "state_reason": null
    },
    {
        "url": "https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/3936",
        "repository_url": "https://api.github.com/repos/Kotlin/kotlinx.coroutines",
        "labels_url": "https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/3936/labels{/name}",
        "comments_url": "https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/3936/comments",
        "events_url": "https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/3936/events",
        "html_url": "https://github.com/Kotlin/kotlinx.coroutines/issues/3936",
        "id": 1987528271,
        "node_id": "I_kwDOA63QcM52d0ZP",
        "number": 3936,
        "title": "kotlinx.coroutines.scheduling.BlockingCoroutineDispatcherThreadLimitStressTest failed",
        "user": {
            "login": "dkhalanskyjb",
            "id": 52952525,
            "node_id": "MDQ6VXNlcjUyOTUyNTI1",
            "avatar_url": "https://avatars.githubusercontent.com/u/52952525?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/dkhalanskyjb",
            "html_url": "https://github.com/dkhalanskyjb",
            "followers_url": "https://api.github.com/users/dkhalanskyjb/followers",
            "following_url": "https://api.github.com/users/dkhalanskyjb/following{/other_user}",
            "gists_url": "https://api.github.com/users/dkhalanskyjb/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/dkhalanskyjb/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/dkhalanskyjb/subscriptions",
            "organizations_url": "https://api.github.com/users/dkhalanskyjb/orgs",
            "repos_url": "https://api.github.com/users/dkhalanskyjb/repos",
            "events_url": "https://api.github.com/users/dkhalanskyjb/events{/privacy}",
            "received_events_url": "https://api.github.com/users/dkhalanskyjb/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 2869593679,
                "node_id": "MDU6TGFiZWwyODY5NTkzNjc5",
                "url": "https://api.github.com/repos/Kotlin/kotlinx.coroutines/labels/build",
                "name": "build",
                "color": "585A1E",
                "default": false,
                "description": ""
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [

        ],
        "milestone": null,
        "comments": 2,
        "created_at": "2023-11-10T12:24:08Z",
        "updated_at": "2023-12-05T13:04:43Z",
        "closed_at": null,
        "author_association": "COLLABORATOR",
        "active_lock_reason": null,
        "body": "```\r\njava.lang.AssertionError: Expected pool threads to be in interval 0..9, but has 10\r\n  at org.junit.Assert.fail(Assert.java:89)\r\n  at kotlin.test.junit.JUnitAsserter.fail(JUnitSupport.kt:56)\r\n  at kotlin.test.Asserter$DefaultImpls.assertTrue(Assertions.kt:652)\r\n  at kotlin.test.junit.JUnitAsserter.assertTrue(JUnitSupport.kt:30)\r\n  at kotlin.test.Asserter$DefaultImpls.assertTrue(Assertions.kt:662)\r\n  at kotlin.test.junit.JUnitAsserter.assertTrue(JUnitSupport.kt:30)\r\n  at kotlin.test.AssertionsKt__AssertionsKt.assertTrue(Assertions.kt:44)\r\n  at kotlin.test.AssertionsKt.assertTrue(Unknown Source)\r\n  at kotlinx.coroutines.scheduling.SchedulerTestBase$Companion.checkPoolThreadsCreated(SchedulerTestBase.kt:35)\r\n  at kotlinx.coroutines.scheduling.SchedulerTestBase$Companion.checkPoolThreadsCreated$default(SchedulerTestBase.kt:32)\r\n  at kotlinx.coroutines.scheduling.BlockingCoroutineDispatcherThreadLimitStressTest$testLimitParallelismToOne$1.invokeSuspend(BlockingCoroutineDispatcherThreadLimitStressTest.kt:44)\r\n  at kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith(ContinuationImpl.kt:33)\r\n  at kotlinx.coroutines.DispatchedTask.run(DispatchedTask.kt:108)\r\n  at kotlinx.coroutines.EventLoopImplBase.processNextEvent(EventLoop.common.kt:280)\r\n  at kotlinx.coroutines.BlockingCoroutine.joinBlocking(Builders.kt:85)\r\n  at kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking(Builders.kt:59)\r\n  at kotlinx.coroutines.BuildersKt.runBlocking(Unknown Source)\r\n  at kotlinx.coroutines.TestBase.runTest(TestBase.kt:223)\r\n  at kotlinx.coroutines.TestBase.runTest$default(TestBase.kt:215)\r\n  at kotlinx.coroutines.scheduling.BlockingCoroutineDispatcherThreadLimitStressTest.testLimitParallelismToOne(BlockingCoroutineDispatcherThreadLimitStressTest.kt:24)\r\n  at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n  at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\r\n  at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n  at java.base/java.lang.reflect.Method.invoke(Method.java:566)\r\n  at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:59)\r\n  at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)\r\n  at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:56)\r\n  at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)\r\n  at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26)\r\n  at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)\r\n  at org.junit.runners.ParentRunner$3.evaluate(ParentRunner.java:306)\r\n  at org.junit.runners.BlockJUnit4ClassRunner$1.evaluate(BlockJUnit4ClassRunner.java:100)\r\n  at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:366)\r\n  at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:103)\r\n  at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:63)\r\n  at org.junit.runners.ParentRunner$4.run(ParentRunner.java:331)\r\n  at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:79)\r\n  at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:329)\r\n  at org.junit.runners.ParentRunner.access$100(ParentRunner.java:66)\r\n  at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:293)\r\n  at org.junit.runners.ParentRunner$3.evaluate(ParentRunner.java:306)\r\n  at org.junit.runners.ParentRunner.run(ParentRunner.java:413)\r\n  at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.runTestClass(JUnitTestClassExecutor.java:110)\r\n  at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:58)\r\n  at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:38)\r\n  at org.gradle.api.internal.tasks.testing.junit.AbstractJUnitTestClassProcessor.processTestClass(AbstractJUnitTestClassProcessor.java:62)\r\n  at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.processTestClass(SuiteTestClassProcessor.java:51)\r\n  at jdk.internal.reflect.GeneratedMethodAccessor9.invoke(Unknown Source)\r\n  at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n  at java.base/java.lang.reflect.Method.invoke(Method.java:566)\r\n  at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:36)\r\n  at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24)\r\n  at org.gradle.internal.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:33)\r\n  at org.gradle.internal.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:94)\r\n  at com.sun.proxy.$Proxy2.processTestClass(Unknown Source)\r\n  at org.gradle.api.internal.tasks.testing.worker.TestWorker$2.run(TestWorker.java:176)\r\n  at org.gradle.api.internal.tasks.testing.worker.TestWorker.executeAndMaintainThreadName(TestWorker.java:129)\r\n  at org.gradle.api.internal.tasks.testing.worker.TestWorker.execute(TestWorker.java:100)\r\n  at org.gradle.api.internal.tasks.testing.worker.TestWorker.execute(TestWorker.java:60)\r\n  at org.gradle.process.internal.worker.child.ActionExecutionWorker.execute(ActionExecutionWorker.java:56)\r\n  at org.gradle.process.internal.worker.child.SystemApplicationClassLoaderWorker.call(SystemApplicationClassLoaderWorker.java:133)\r\n  at org.gradle.process.internal.worker.child.SystemApplicationClassLoaderWorker.call(SystemApplicationClassLoaderWorker.java:71)\r\n  at worker.org.gradle.process.internal.worker.GradleWorkerMain.run(GradleWorkerMain.java:69)\r\n  at worker.org.gradle.process.internal.worker.GradleWorkerMain.main(GradleWorkerMain.java:74)\r\n```",
        "reactions": {
            "url": "https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/3936/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/3936/timeline",
        "performed_via_github_app": null,
        "state_reason": null
    },
    {
        "url": "https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/3919",
        "repository_url": "https://api.github.com/repos/Kotlin/kotlinx.coroutines",
        "labels_url": "https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/3919/labels{/name}",
        "comments_url": "https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/3919/comments",
        "events_url": "https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/3919/events",
        "html_url": "https://github.com/Kotlin/kotlinx.coroutines/issues/3919",
        "id": 1949838535,
        "node_id": "I_kwDOA63QcM50OCzH",
        "number": 3919,
        "title": "Discourage manual execution control in the test framework",
        "user": {
            "login": "dkhalanskyjb",
            "id": 52952525,
            "node_id": "MDQ6VXNlcjUyOTUyNTI1",
            "avatar_url": "https://avatars.githubusercontent.com/u/52952525?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/dkhalanskyjb",
            "html_url": "https://github.com/dkhalanskyjb",
            "followers_url": "https://api.github.com/users/dkhalanskyjb/followers",
            "following_url": "https://api.github.com/users/dkhalanskyjb/following{/other_user}",
            "gists_url": "https://api.github.com/users/dkhalanskyjb/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/dkhalanskyjb/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/dkhalanskyjb/subscriptions",
            "organizations_url": "https://api.github.com/users/dkhalanskyjb/orgs",
            "repos_url": "https://api.github.com/users/dkhalanskyjb/repos",
            "events_url": "https://api.github.com/users/dkhalanskyjb/events{/privacy}",
            "received_events_url": "https://api.github.com/users/dkhalanskyjb/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 846419469,
                "node_id": "MDU6TGFiZWw4NDY0MTk0Njk=",
                "url": "https://api.github.com/repos/Kotlin/kotlinx.coroutines/labels/design",
                "name": "design",
                "color": "8a9edb",
                "default": false,
                "description": ""
            },
            {
                "id": 1435915404,
                "node_id": "MDU6TGFiZWwxNDM1OTE1NDA0",
                "url": "https://api.github.com/repos/Kotlin/kotlinx.coroutines/labels/test",
                "name": "test",
                "color": "c94240",
                "default": false,
                "description": ""
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [

        ],
        "milestone": null,
        "comments": 9,
        "created_at": "2023-10-18T14:02:20Z",
        "updated_at": "2023-11-08T12:18:16Z",
        "closed_at": null,
        "author_association": "COLLABORATOR",
        "active_lock_reason": null,
        "body": "## Problem statement, the short version\r\n\r\nWe receive a lot of questions about using the test module, the answer to which is to avoid using `advanceUntilIdle`/`advanceTimeBy`.\r\n\r\n`advanceTimeBy`, `advanceUntilIdle`, and `runCurrent` can be replaced by `delay`, `yield`, or cross-coroutine communication in most tests, with better results and much clearer semantics. Because `runTest` uses virtual time, even `delay(1.seconds)` is instantaneous. Manual time control is error-prone, discouraged, has surprising behavior, and is increasingly incompatible with the rest of the framework.\r\n\r\nWe should think of ways to make these functions less prominent so that people don't use them unless they absolutely need to, providing alternatives that more directly and correctly express the intent behind their typical usage.\r\n\r\n**Request for comments: if you use `advanceTimeBy`, `runCurrent`, or `advanceUntilIdle` in your code and don't think they could be reasonably replaced with the suggested alternatives when we implement them, please provide examples of your use cases.**\r\n\r\n## Alternatives to each manual execution control function\r\n\r\n### `advanceTimeBy`\r\n\r\nThis function is used when some specific event that's known to be scheduled into the future needs to happen before its results are validated.\r\n\r\nExamples:\r\n\r\n```kotlin\r\nfun CoroutineScope.runAfter(n: Duration, blockAction: () -> Unit) {\r\n  launch {\r\n    delay(n)\r\n    blockAction()\r\n  }\r\n}\r\n\r\n// The code before: the simple scenario\r\n@Test\r\nfun testRunAfter1() = runTest {\r\n  var entered = false\r\n  runAfter(10.seconds) { entered = true }\r\n  advanceTimeBy(11.seconds)\r\n  assertTrue(entered)\r\n}\r\n\r\n// The code before: the complex scenario\r\n@Test\r\nfun testRunAfter2() = runTest {\r\n  var entered = false\r\n  runAfter(10.seconds) { entered = true }\r\n  advanceTimeBy(10.seconds)\r\n  assertFalse(entered)\r\n  runCurrent()\r\n  assertTrue(entered)\r\n}\r\n```\r\n\r\nWhen you have `advanceTimeBy(n)` directly in your test (which is almost all of its usages), it can be replaced with `delay(n-1.milliseconds)`.\r\n* `-1` is needed because `advanceTimeBy` does not execute the tasks scheduled for the moment `currentTime() + n`, whereas `delay(n)` will also execute the tasks that were already scheduled for `currentTime() + n` before `delay(n)` was called.\r\n* However, the virtual time will be one millisecond off compared to what it was before, which may need to be accounted for downstream.\r\n\r\nSo, these tests become\r\n\r\n```kotlin\r\n// The code after: the simple scenario\r\n@Test\r\nfun testRunAfter1() = runTest {\r\n  var entered = false\r\n  runAfter(10.seconds) { entered = true }\r\n  delay(11.seconds) // here, there's no difference whether to subtract one millisecond\r\n  assertTrue(entered)\r\n}\r\n\r\n// The code after: the complex scenario\r\n@Test\r\nfun testRunAfter2() = runTest {\r\n  var entered = false\r\n  runAfter(10.seconds) { entered = true }\r\n  delay(10.seconds - 1.milliseconds)\r\n  assertFalse(entered)\r\n  delay(1.milliseconds) // can't run `runCurrent`, as it was not yet time for the block to execute\r\n  assertTrue(entered)\r\n}\r\n```\r\n\r\n### `advanceUntilIdle`\r\n\r\nThis function has the behavior of running the tasks present in the *test scheduler*, and only there, while there are tasks outside of `backgroundScope`. Almost always, the upper bound on the virtual time it takes to execute all code in the test dispatcher is known. Typically, it's just `1.milliseconds`. So, functionally, `advanceUntilIdle` can almost always be replaced by `delay(20.hours)`.\r\n\r\nHowever, in many cases, there are problems with this replacement:\r\n* The most important thing is, it doesn't demonstrate the intent: the programmer *intends* to wait until the system is idle, and `20.hours` is a completely arbitrary constant.\r\n  * Then again, `advanceUntilIdle` doesn't always do what it says on the box, as work on other dispatchers is not taken into account, so idleness is a fuzzy concept anyway. Though it's inarguable that when `advanceUntilIdle` does work, it also shows the intent.\r\n* If there is work in `backgroundScope` that happens, say, every `100.milliseconds`, `delay(20.hours)` will waste a lot of processing power on that work.\r\n\r\nWe must first present a viable alternative to confidently claim that `advanceUntilIdle` is no longer needed.\r\n\r\nIn most cases we've seen, what people intend is actually for the spawned coroutines to finish, regardless of whether these coroutines execute on the test dispatcher. So, we could introduce a function like\r\n\r\n```kotlin\r\n/**\r\n * Suspends until all the coroutines spawned in this [CoroutineScope] are completed.\r\n */\r\nsuspend fun CoroutineScope.awaitAllChildren(): Unit {\r\n    while (true) {\r\n        val children = this.coroutineContext[Job]!!.children.toList()\r\n        if (children.all { !isActive }) break\r\n        children.forEach { it.join() }\r\n    }\r\n}\r\n```\r\n\r\nReplacing `advanceUntilIdle` with `awaitAllChildren()` wouldn't always work. For example, here, it would lead to a deadlock:\r\n\r\n```kotlin\r\nfun testFoo() = runTest {\r\n  val channel = Channel<Unit>()\r\n  launch { channel.receive() }\r\n  advanceUntilIdle()\r\n  channel.send(Unit)\r\n}\r\n```\r\n\r\nHowever, in all the cases we've seen so far where this happens, `advanceUntilIdle` is not needed at all and was probably put there just in case. We'll need to investigate further.\r\n\r\n### `runCurrent`\r\n\r\nAs shown in the previous example, `delay(1.milliseconds)` usually does the trick.\r\n\r\nStill, this replacement is problematic:\r\n* It doesn't demonstrate the intent.\r\n* It is not a direct equivalent to `runCurrent`, as `runCurrent` ensures no more tasks are scheduled for the current moment by running all of them.\r\n\r\nA proper replacement would probably be a function like\r\n```kotlin\r\n/**\r\n * Waits until all the tasks left are the ones scheduled for a later point of virtual time.\r\n */\r\nsuspend fun TestCoroutineScheduler.awaitIdle(): Unit\r\n```\r\n\r\nThis is also needed to properly support using Espresso with the test framework https://github.com/Kotlin/kotlinx.coroutines/issues/242\r\n\r\n## Problem statement, the long version\r\n\r\n### The current understanding of how people (need to) test coroutines\r\n\r\nBefore the large test framework refactoring, there were effectively two APIs: a low-level one (`TestCoroutineScope`, `runCurrent`, `advanceUntilIdle`, `advanceTimeBy`) and a higher-level one, `runBlockingTest`, built on top of it.\r\n\r\nThere were three patterns for testing coroutines.\r\n\r\n#### Library vs framework\r\n\r\n1. The first pattern looked like this:\r\n\r\n```kotlin\r\n// OLD API, no longer available\r\nfun testFooBar() {\r\n  val scope = TestCoroutineScope()\r\n  try {\r\n    scope.launch { foo() }\r\n    advanceUntilIdle()\r\n    scope.launch { bar() }\r\n    advanceUntilIdle()\r\n  } finally {\r\n    cleanupTestCoroutines()\r\n  }\r\n}\r\n```\r\n\r\nIt takes an \"off from the side\" look at coroutines: the testing facilities were treated as a *library* of functions to be mixed and matched, with behavior being *requested* from them. One would explicitly schedule work on the test facilities, explicitly ask for it to be executed, and explicitly ensure the correct behavior.\r\n\r\n2. Another approach was like this:\r\n\r\n```kotlin\r\n// OLD API, no longer available\r\nfun testFooBar() {\r\n  runBlockingTest {\r\n    foo()\r\n    bar()\r\n  }\r\n}\r\n```\r\n\r\nHere, testing is conducted from *inside* a coroutine. `runBlockingTest` itself called `advanceUntilIdle` and `cleanupTestCoroutines`, ensuring the correct behavior in the common case, but giving up some of the flexibility. `runBlockingTest` was a *framework* for coroutines to be tested in. `runBlockingTest` was itself implemented on top of the primitives provided by the library-like interface.\r\n\r\n3. There is also a mixed approach:\r\n\r\n```\r\n// OLD API, no longer available\r\nfun testFooBar() {\r\n  runBlockingTest {\r\n    launch { foo() }\r\n    advanceUntilIdle()\r\n    launch { bar() }\r\n    advanceUntilIdle()\r\n  }\r\n}\r\n```\r\n\r\nAfter the big refactoring, where every coroutine test must be wrapped in `runTest`, tests that used to be in the library form took this approach instead of translating to the pure framework-like one. What follows is an explanation of why both the pure library approach and the mixed approach are suboptimal for the common use cases and one should relegate the execution control to `runTest`.\r\n\r\n#### The issues with manual execution control\r\n\r\nAt a glance, it may look like the library approach is clearly the better one: everything is explicit, with minimal magical behavior that needs to be understood, and one can engage with the scheduled coroutines as closely as needed, whereas `runBlockingTest` just does its thing somehow on its own in mysterious ways.\r\n\r\nUnfortunately, careful study of hundreds of tests has shown that what people need *is* a framework for testing, not a library.\r\n\r\n##### Tests not testing anything\r\n\r\nPeople were misusing the testing library all the time. For example, consider this \"test\":\r\n\r\n```kotlin\r\n// OLD API, no longer available\r\n@Test\r\nfun testFoo() {\r\n  val testScope = TestCoroutineScope()\r\n  testScope.launch {\r\n    val a = foo()\r\n    assertEquals(x, a)\r\n  }\r\n}\r\n```\r\n\r\nThis test runs `foo` until the first suspension and then stops doing anything at all. `assertEquals` will never get called.\r\n\r\nThe root of the issue is that it's just incorrect to create a `TestCoroutineScope` and not call `cleanupTestCoroutines` at some point. This test is more than useless: it gives a false sense of security, leaving the impression that `foo` is properly tested.\r\n\r\n##### No interoperating with asynchronous resumptions\r\n\r\n###### Problem statement\r\n\r\nManual time control only knows about tasks that the test dispatcher needs to execute. It doesn't know anything about tasks that happen on other dispatchers.\r\n\r\n```kotlin\r\nfun foo() = withContext(Dispatchers.IO) {\r\n  // a network call\r\n}\r\n\r\n// OLD API, no longer available\r\n// this test would most likely crash\r\n@Test\r\nfun testFoo() {\r\n  runBlockingTest {\r\n    launch {\r\n      val a = foo()\r\n      assertEquals(x, a)\r\n    }\r\n    advanceUntilIdle()\r\n    launch {\r\n      val b = foo()\r\n      assertEquals(x, b)\r\n    }\r\n  }\r\n}\r\n```\r\n\r\n`advanceUntilIdle` here will progress the first launched coroutine until the point when `foo` is entered. After that, the test dispatcher has no control over what happens, `Dispatchers.IO` has to take it from there.\r\n\r\nSo, by the time the second `launch` happens, a network call may or may have not been executed. Most likely, it wasn't. There are race conditions in this test, making it flaky and unpredictable.\r\n\r\nLuckily, most tests were not written this way: most likely, the network call wouldn't have enough time to finish by the end of the test, and `runBlockingTest` would crash with an exception notifying that some coroutines spawned inside it didn't complete. This behavior was mysterious to many, as understanding it requires a solid model of the internals of coroutines, and so people were just generally discouraged from using non-test dispatchers inside tests.\r\n\r\nAdd to it the previous problem of people not even using `runBlockingTest` and forgetting to clean up coroutines, and you get a recipe for disaster: even if you didn't forget `advanceUntilIdle` at the end of the test, it still meant little. Some adventurous souls went out of their way to make tests pass, rewriting tests not to use `runBlockingTest` or `cleanupTestCoroutines` as they \"caused the test to crash.\"\r\n\r\n###### A partial fix\r\n\r\nThe library approach *can* be made to properly work with external dispatches like this:\r\n\r\n```kotlin\r\n// OLD API, no longer available\r\n@Test\r\nfun testFoo() {\r\n  val scope = TestCoroutineScope()\r\n  val job = scope.launch {\r\n    // ____________ A ___________\r\n    // this is the main test body\r\n    val a = foo()\r\n    assertEquals(x, a)\r\n    val b = foo()\r\n    assertEquals(x, b)\r\n    // ____________ B ____________\r\n  }\r\n  try {\r\n    // ____________ C ____________\r\n    scope.advanceUntilIdle()\r\n    while (job.isActive) {\r\n      delay(100.milliseconds)\r\n      scope.advanceUntilIdle()\r\n    }\r\n    // _____________ D ____________\r\n  } finally {\r\n    scope.cleanupTestCoroutines()\r\n  }\r\n}\r\n```\r\n\r\nThis way, until the last line of the test body has finished executing (after which `job.isActive` becomes `false`), we run all the tasks scheduled in the test dispatcher, and if we're not done after that, also wait for `100.milliseconds` for some other dispatchers to asynchronously pass more tasks to the test dispatcher.\r\n\r\nHowever, note that the only part of the test relevant to us is between lines `A` and `B`. All the other things are simply boilerplate that virtually every test needs, but is very difficult to come up with.\r\n\r\n###### Manual execution control inherently can't support asynchronous work in general\r\n\r\nAll of the above is a good indication that manual execution control is error-prone in general in the case of asynchronous resumptions: every `advanceUntilIdle` must be replaced with code between lines `C` and `D` in order to properly support them.\r\n\r\nThe problem is, the role of `job` is not always obvious. For example, consider this test:\r\n\r\n```kotlin\r\nfun CoroutineScope.bar() {\r\n  launch(Dispatchers.IO) {\r\n    // something\r\n  }\r\n}\r\n\r\n// OLD API, no longer available\r\n// this test would most likely crash\r\n@Test\r\nfun testFoo() {\r\n  runBlockingTest {\r\n    bar()\r\n    advanceUntilIdle()\r\n  }\r\n}\r\n```\r\n\r\nIf one attempted to replace `advanceUntilIdle` here with the `C`-`D` construct, there would be no one to fulfill the role of `job`. `bar` does call `launch`, but does it as an implementation detail, without exposing the resulting `Job`. Calling `advanceUntilIdle` here is simply useless, even though it doesn't seem this way at a glance: from the point of view of the test framework, the system *is* idle while non-test dispatchers are busy.\r\n\r\nReplacing `advanceUntilIdle` with `delay(2.seconds)` would not fix the behavior in this case, but it would still clear up the conceptual model. Since, inside the test dispatcher, delays are instantaneous, from its point of view, waiting for `Dispatchers.IO` to finish doing its thing requires infinite time. The problem of \"I don't know when asynchronous work will be completed\" needs to be solved programmatically somehow: you can't test asynchronous work if you don't know when it finishes, but the false concept of system idleness significantly muddies the mental model behind the testing framework.\r\n\r\n##### Interactions between manual execution control and real-time require thread blocking\r\n\r\nAnother issue stems from the fact that manual execution control functions are blocking and can't suspend.\r\n\r\nFor an example of where this causes problems, see https://github.com/Kotlin/kotlinx.coroutines/issues/3179. We have a reasonable request to disable virtual time in parts of tests. However, the current design of manual execution control prevents us from reaching a clear solution.\r\n\r\n```kotlin\r\nfun testFoo() = runTest {\r\n  val job1 = launch(NoDelaySkipping) {\r\n    delay(1.seconds)\r\n    println(1)\r\n  }\r\n  launch {\r\n    withContext(Dispatchers.IO) {\r\n      Thread.sleep(500) // 0.5 seconds\r\n    }\r\n    println(0)\r\n  }\r\n  val job2 = launch {\r\n    delay(2.seconds)\r\n    println(2)\r\n  }\r\n  // _______ A _________\r\n  job1.join()\r\n  println(currentTime())\r\n}\r\n```\r\n\r\nWhat virtual time should be printed? In what order should the numbers be printed?\r\n\r\nThere are seemingly two viable answers:\r\n1. It doesn't matter, as disabling virtual time is only needed in fairly specific circumstances, or\r\n2. The current time should be `1.seconds`, the order should be `0` (in half a second), `1` (in a second since the start of the test), and then `2` (also in a second since the start of the test).\r\n\r\nIt's unlikely that someone would *expect* `job1` to complete after `job2` just because it's required to use the real-world time for `job1`, as the abstraction behind virtual time is that it is just like the actual time, but for tests, it's passing infinitely faster.\r\n\r\nThe next question is, what should happen if line `A` is replaced with `advanceUntilIdle` or `advanceTimeBy(2.seconds)`. Neither of them is allowed to wait for one real-life second, as they are blocking functions. They would have to block the thread during waiting, which is not even expressible in the JS implementation of the test framework, but would be a strange behavior in any case. In any case, after half a second of waiting, their blocking would also need to be interrupted, as a new task arrived to the test scheduler, ready for execution.\r\n\r\nAll of this could be easily mitigated if `advanceUntilIdle` and `advanceTimeBy` were `suspend` functions: they would just suspend, freeing the thread to do other things until the real-time wait is over or a new task arrives. This is exactly the behavior that writing `delay(2.seconds)` instead of `advanceTimeBy` has out of the box!\r\n\r\nThere is no way to make time control functions play nicely in these scenarios. It seems like the only sensible way to implement them would be to throw `UnsupporteOperationException` if they encounter a task that requires waiting for a given amount of real time.\r\n\r\n##### Most tests don't need this kind of complex API\r\n\r\nOut of the hundreds of tests we've seen during the research, there was a single-digit number of them that did use manual execution control in a way that the framework style wasn't better suited for.\r\n\r\nWhen implementing low-level libraries over the coroutines (for example, when writing your own schedulers), one may need to validate the behavior in cases of interleavings that are difficult to emulate with just `runBlockingTest`, mocking calls, and calling `delay`. The majority of tests were worse off not using `runBlockingTest` than otherwise, being more brittle.\r\n\r\n##### Why did we keep manual execution control after the refactoring if it's so problematic?\r\n\r\nThere are two reasons:\r\n\r\n* *A lot* of code was already written using manual execution control. We took backward compatibility seriously, despite the library being marked as experimental, and attempted to provide a streamlined way to migrate from the old API to the new one: https://github.com/Kotlin/kotlinx.coroutines/blob/master/kotlinx-coroutines-test/MIGRATION.md Barring a few exceptions, we mostly succeeded. It wouldn't be possible if we just removed manual execution control.\r\n* At the time, we didn't fully understand that manual execution control is more trouble than it's worth. Many other entities in the test framework needed our attention, and manual execution control was comparatively benign.\r\n* Some tests *do* benefit from manual execution control. These are mostly low-level tests of tricky things that need to do something uncommon, like calling `runCurrent` or `advanceTimeBy` from outside the test body, where they can't be replaced with a `delay`.",
        "reactions": {
            "url": "https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/3919/reactions",
            "total_count": 2,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 2,
            "rocket": 0,
            "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/3919/timeline",
        "performed_via_github_app": null,
        "state_reason": null
    }
]
